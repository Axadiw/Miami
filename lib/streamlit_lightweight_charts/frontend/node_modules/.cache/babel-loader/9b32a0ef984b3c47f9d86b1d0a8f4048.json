{"ast":null,"code":"import _classCallCheck from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Dictionary } from '../type';\nimport { Builder } from '../builder';\n/** @ignore */\nexport var DictionaryBuilder = /*#__PURE__*/function (_Builder) {\n  _inherits(DictionaryBuilder, _Builder);\n  var _super = _createSuper(DictionaryBuilder);\n  function DictionaryBuilder(_ref) {\n    var _this;\n    var type = _ref['type'],\n      nulls = _ref['nullValues'],\n      hashFn = _ref['dictionaryHashFunction'];\n    _classCallCheck(this, DictionaryBuilder);\n    _this = _super.call(this, {\n      type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered)\n    });\n    _this._nulls = null;\n    _this._dictionaryOffset = 0;\n    _this._keysToIndices = Object.create(null);\n    _this.indices = Builder.new({\n      'type': _this.type.indices,\n      'nullValues': nulls\n    });\n    _this.dictionary = Builder.new({\n      'type': _this.type.dictionary,\n      'nullValues': null\n    });\n    if (typeof hashFn === 'function') {\n      _this.valueToKey = hashFn;\n    }\n    return _this;\n  }\n  _createClass(DictionaryBuilder, [{\n    key: \"values\",\n    get: function get() {\n      return this.indices.values;\n    }\n  }, {\n    key: \"nullCount\",\n    get: function get() {\n      return this.indices.nullCount;\n    }\n  }, {\n    key: \"nullBitmap\",\n    get: function get() {\n      return this.indices.nullBitmap;\n    }\n  }, {\n    key: \"byteLength\",\n    get: function get() {\n      return this.indices.byteLength + this.dictionary.byteLength;\n    }\n  }, {\n    key: \"reservedLength\",\n    get: function get() {\n      return this.indices.reservedLength + this.dictionary.reservedLength;\n    }\n  }, {\n    key: \"reservedByteLength\",\n    get: function get() {\n      return this.indices.reservedByteLength + this.dictionary.reservedByteLength;\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(value) {\n      return this.indices.isValid(value);\n    }\n  }, {\n    key: \"setValid\",\n    value: function setValid(index, valid) {\n      var indices = this.indices;\n      valid = indices.setValid(index, valid);\n      this.length = indices.length;\n      return valid;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(index, value) {\n      var keysToIndices = this._keysToIndices;\n      var key = this.valueToKey(value);\n      var idx = keysToIndices[key];\n      if (idx === undefined) {\n        keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n      }\n      return this.indices.setValue(index, idx);\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var type = this.type;\n      var prev = this._dictionary;\n      var curr = this.dictionary.toVector();\n      var data = this.indices.flush().clone(type);\n      data.dictionary = prev ? prev.concat(curr) : curr;\n      this.finished || (this._dictionaryOffset += curr.length);\n      this._dictionary = data.dictionary;\n      this.clear();\n      return data;\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      this.indices.finish();\n      this.dictionary.finish();\n      this._dictionaryOffset = 0;\n      this._keysToIndices = Object.create(null);\n      return _get(_getPrototypeOf(DictionaryBuilder.prototype), \"finish\", this).call(this);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.indices.clear();\n      this.dictionary.clear();\n      return _get(_getPrototypeOf(DictionaryBuilder.prototype), \"clear\", this).call(this);\n    }\n  }, {\n    key: \"valueToKey\",\n    value: function valueToKey(val) {\n      return typeof val === 'string' ? val : \"\".concat(val);\n    }\n  }]);\n  return DictionaryBuilder;\n}(Builder);","map":{"version":3,"sources":["builder/dictionary.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntBuilder } from './int';\nimport { Dictionary, DataType } from '../type';\nimport { Builder, BuilderOptions } from '../builder';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionaryOffset: number;\n    protected _dictionary?: Vector<T['dictionary']>;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._nulls = <any> null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        let keysToIndices = this._keysToIndices;\n        let key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any): string | number {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}