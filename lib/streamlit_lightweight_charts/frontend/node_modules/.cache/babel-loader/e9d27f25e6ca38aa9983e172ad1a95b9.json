{"ast":null,"code":"import _get from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\n/** @ignore */\nvar roundLengthUpToNearest64Bytes = function roundLengthUpToNearest64Bytes(len, BPE) {\n  return (len * BPE + 63 & ~63 || 64) / BPE;\n};\n/** @ignore */\nvar sliceOrExtendArray = function sliceOrExtendArray(arr) {\n  var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return arr.length >= len ? arr.subarray(0, len) : memcpy(new arr.constructor(len), arr, 0);\n};\n/** @ignore */\nexport var BufferBuilder = /*#__PURE__*/function () {\n  function BufferBuilder(buffer) {\n    var stride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    _classCallCheck(this, BufferBuilder);\n    this.buffer = buffer;\n    this.stride = stride;\n    this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n    this.ArrayType = buffer.constructor;\n    this._resize(this.length = buffer.length / stride | 0);\n  }\n  _createClass(BufferBuilder, [{\n    key: \"byteLength\",\n    get: function get() {\n      return this.length * this.stride * this.BYTES_PER_ELEMENT | 0;\n    }\n  }, {\n    key: \"reservedLength\",\n    get: function get() {\n      return this.buffer.length / this.stride;\n    }\n  }, {\n    key: \"reservedByteLength\",\n    get: function get() {\n      return this.buffer.byteLength;\n    }\n    // @ts-ignore\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      return this;\n    }\n  }, {\n    key: \"append\",\n    value: function append(value) {\n      return this.set(this.length, value);\n    }\n  }, {\n    key: \"reserve\",\n    value: function reserve(extra) {\n      if (extra > 0) {\n        this.length += extra;\n        var stride = this.stride;\n        var length = this.length * stride;\n        var reserved = this.buffer.length;\n        if (length >= reserved) {\n          this._resize(reserved === 0 ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT) : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT));\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;\n      length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n      var array = sliceOrExtendArray(this.buffer, length);\n      this.clear();\n      return array;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.length = 0;\n      this._resize(0);\n      return this;\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(newLength) {\n      return this.buffer = memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n  }]);\n  return BufferBuilder;\n}();\nBufferBuilder.prototype.offset = 0;\n/** @ignore */\nexport var DataBufferBuilder = /*#__PURE__*/function (_BufferBuilder) {\n  _inherits(DataBufferBuilder, _BufferBuilder);\n  var _super = _createSuper(DataBufferBuilder);\n  function DataBufferBuilder() {\n    _classCallCheck(this, DataBufferBuilder);\n    return _super.apply(this, arguments);\n  }\n  _createClass(DataBufferBuilder, [{\n    key: \"last\",\n    value: function last() {\n      return this.get(this.length - 1);\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this.buffer[index];\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      this.reserve(index - this.length + 1);\n      this.buffer[index * this.stride] = value;\n      return this;\n    }\n  }]);\n  return DataBufferBuilder;\n}(BufferBuilder);\n/** @ignore */\nexport var BitmapBufferBuilder = /*#__PURE__*/function (_DataBufferBuilder) {\n  _inherits(BitmapBufferBuilder, _DataBufferBuilder);\n  var _super2 = _createSuper(BitmapBufferBuilder);\n  function BitmapBufferBuilder() {\n    var _this;\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array(0);\n    _classCallCheck(this, BitmapBufferBuilder);\n    _this = _super2.call(this, data, 1 / 8);\n    _this.numValid = 0;\n    return _this;\n  }\n  _createClass(BitmapBufferBuilder, [{\n    key: \"numInvalid\",\n    get: function get() {\n      return this.length - this.numValid;\n    }\n  }, {\n    key: \"get\",\n    value: function get(idx) {\n      return this.buffer[idx >> 3] >> idx % 8 & 1;\n    }\n  }, {\n    key: \"set\",\n    value: function set(idx, val) {\n      var _this$reserve = this.reserve(idx - this.length + 1),\n        buffer = _this$reserve.buffer;\n      var byte = idx >> 3,\n        bit = idx % 8,\n        cur = buffer[byte] >> bit & 1;\n      // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n      // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n      val ? cur === 0 && (buffer[byte] |= 1 << bit, ++this.numValid) : cur === 1 && (buffer[byte] &= ~(1 << bit), --this.numValid);\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.numValid = 0;\n      return _get(_getPrototypeOf(BitmapBufferBuilder.prototype), \"clear\", this).call(this);\n    }\n  }]);\n  return BitmapBufferBuilder;\n}(DataBufferBuilder);\n/** @ignore */\nexport var OffsetsBufferBuilder = /*#__PURE__*/function (_DataBufferBuilder2) {\n  _inherits(OffsetsBufferBuilder, _DataBufferBuilder2);\n  var _super3 = _createSuper(OffsetsBufferBuilder);\n  function OffsetsBufferBuilder() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Int32Array(1);\n    _classCallCheck(this, OffsetsBufferBuilder);\n    return _super3.call(this, data, 1);\n  }\n  _createClass(OffsetsBufferBuilder, [{\n    key: \"append\",\n    value: function append(value) {\n      return this.set(this.length - 1, value);\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      var offset = this.length - 1;\n      var buffer = this.reserve(index - offset + 1).buffer;\n      if (offset < index++) {\n        buffer.fill(buffer[offset], offset, index);\n      }\n      buffer[index] = buffer[index - 1] + value;\n      return this;\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length - 1;\n      if (length > this.length) {\n        this.set(length - 1, 0);\n      }\n      return _get(_getPrototypeOf(OffsetsBufferBuilder.prototype), \"flush\", this).call(this, length + 1);\n    }\n  }]);\n  return OffsetsBufferBuilder;\n}(DataBufferBuilder);\n/** @ignore */\nexport var WideBufferBuilder = /*#__PURE__*/function (_BufferBuilder2) {\n  _inherits(WideBufferBuilder, _BufferBuilder2);\n  var _super4 = _createSuper(WideBufferBuilder);\n  function WideBufferBuilder() {\n    _classCallCheck(this, WideBufferBuilder);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(WideBufferBuilder, [{\n    key: \"ArrayType64\",\n    get: function get() {\n      return this._ArrayType64 || (this._ArrayType64 = this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array);\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      this.reserve(index - this.length + 1);\n      switch (typeof value) {\n        case 'bigint':\n          this.buffer64[index] = value;\n          break;\n        case 'number':\n          this.buffer[index * this.stride] = value;\n          break;\n        default:\n          this.buffer.set(value, index * this.stride);\n      }\n      return this;\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(newLength) {\n      var data = _get(_getPrototypeOf(WideBufferBuilder.prototype), \"_resize\", this).call(this, newLength);\n      var length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n      if (BigIntAvailable) {\n        this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n      }\n      return data;\n    }\n  }]);\n  return WideBufferBuilder;\n}(BufferBuilder);","map":{"version":3,"sources":["builder/buffer.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\n    // @ts-ignore\n    public buffer64: R;\n    // @ts-ignore\n    protected _ArrayType64: BigIntArrayConstructor<R>;\n    public get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}