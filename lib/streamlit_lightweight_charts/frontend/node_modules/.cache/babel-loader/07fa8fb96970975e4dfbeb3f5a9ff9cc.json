{"ast":null,"code":"import _toConsumableArray from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _construct from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _inherits from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DictionaryVector } from '../vector/dictionary';\n/** @ignore */\nexport var Value = /*#__PURE__*/function () {\n  function Value() {\n    _classCallCheck(this, Value);\n  }\n  _createClass(Value, [{\n    key: \"eq\",\n    value: function eq(other) {\n      if (!(other instanceof Value)) {\n        other = new Literal(other);\n      }\n      return new Equals(this, other);\n    }\n  }, {\n    key: \"le\",\n    value: function le(other) {\n      if (!(other instanceof Value)) {\n        other = new Literal(other);\n      }\n      return new LTeq(this, other);\n    }\n  }, {\n    key: \"ge\",\n    value: function ge(other) {\n      if (!(other instanceof Value)) {\n        other = new Literal(other);\n      }\n      return new GTeq(this, other);\n    }\n  }, {\n    key: \"lt\",\n    value: function lt(other) {\n      return new Not(this.ge(other));\n    }\n  }, {\n    key: \"gt\",\n    value: function gt(other) {\n      return new Not(this.le(other));\n    }\n  }, {\n    key: \"ne\",\n    value: function ne(other) {\n      return new Not(this.eq(other));\n    }\n  }]);\n  return Value;\n}();\n/** @ignore */\nexport var Literal = /*#__PURE__*/function (_Value) {\n  _inherits(Literal, _Value);\n  var _super = _createSuper(Literal);\n  function Literal(v) {\n    var _this;\n    _classCallCheck(this, Literal);\n    _this = _super.call(this);\n    _this.v = v;\n    return _this;\n  }\n  return _createClass(Literal);\n}(Value);\n/** @ignore */\nexport var Col = /*#__PURE__*/function (_Value2) {\n  _inherits(Col, _Value2);\n  var _super2 = _createSuper(Col);\n  function Col(name) {\n    var _this2;\n    _classCallCheck(this, Col);\n    _this2 = _super2.call(this);\n    _this2.name = name;\n    return _this2;\n  }\n  _createClass(Col, [{\n    key: \"bind\",\n    value: function bind(batch) {\n      if (!this.colidx) {\n        // Assume column index doesn't change between calls to bind\n        //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n        this.colidx = -1;\n        var fields = batch.schema.fields;\n        for (var idx = -1; ++idx < fields.length;) {\n          if (fields[idx].name === this.name) {\n            this.colidx = idx;\n            break;\n          }\n        }\n        if (this.colidx < 0) {\n          throw new Error(\"Failed to bind Col \\\"\".concat(this.name, \"\\\"\"));\n        }\n      }\n      var vec = this.vector = batch.getChildAt(this.colidx);\n      return function (idx) {\n        return vec.get(idx);\n      };\n    }\n  }]);\n  return Col;\n}(Value);\n/** @ignore */\nexport var Predicate = /*#__PURE__*/function () {\n  function Predicate() {\n    _classCallCheck(this, Predicate);\n  }\n  _createClass(Predicate, [{\n    key: \"and\",\n    value: function and() {\n      for (var _len = arguments.length, expr = new Array(_len), _key = 0; _key < _len; _key++) {\n        expr[_key] = arguments[_key];\n      }\n      return _construct(And, [this].concat(expr));\n    }\n  }, {\n    key: \"or\",\n    value: function or() {\n      for (var _len2 = arguments.length, expr = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        expr[_key2] = arguments[_key2];\n      }\n      return _construct(Or, [this].concat(expr));\n    }\n  }, {\n    key: \"not\",\n    value: function not() {\n      return new Not(this);\n    }\n  }]);\n  return Predicate;\n}();\n/** @ignore */\nexport var ComparisonPredicate = /*#__PURE__*/function (_Predicate) {\n  _inherits(ComparisonPredicate, _Predicate);\n  var _super3 = _createSuper(ComparisonPredicate);\n  function ComparisonPredicate(left, right) {\n    var _this3;\n    _classCallCheck(this, ComparisonPredicate);\n    _this3 = _super3.call(this);\n    _this3.left = left;\n    _this3.right = right;\n    return _this3;\n  }\n  _createClass(ComparisonPredicate, [{\n    key: \"bind\",\n    value: function bind(batch) {\n      if (this.left instanceof Literal) {\n        if (this.right instanceof Literal) {\n          return this._bindLitLit(batch, this.left, this.right);\n        } else {\n          // right is a Col\n          return this._bindLitCol(batch, this.left, this.right);\n        }\n      } else {\n        // left is a Col\n        if (this.right instanceof Literal) {\n          return this._bindColLit(batch, this.left, this.right);\n        } else {\n          // right is a Col\n          return this._bindColCol(batch, this.left, this.right);\n        }\n      }\n    }\n  }]);\n  return ComparisonPredicate;\n}(Predicate);\n/** @ignore */\nexport var CombinationPredicate = /*#__PURE__*/function (_Predicate2) {\n  _inherits(CombinationPredicate, _Predicate2);\n  var _super4 = _createSuper(CombinationPredicate);\n  function CombinationPredicate() {\n    var _this4;\n    _classCallCheck(this, CombinationPredicate);\n    _this4 = _super4.call(this);\n    for (var _len3 = arguments.length, children = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      children[_key3] = arguments[_key3];\n    }\n    _this4.children = children;\n    return _this4;\n  }\n  return _createClass(CombinationPredicate);\n}(Predicate);\n// add children to prototype so it doesn't get mangled in es2015/umd\nCombinationPredicate.prototype.children = Object.freeze([]); // freeze for safety\n/** @ignore */\nexport var And = /*#__PURE__*/function (_CombinationPredicate) {\n  _inherits(And, _CombinationPredicate);\n  var _super5 = _createSuper(And);\n  function And() {\n    for (var _len4 = arguments.length, children = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      children[_key4] = arguments[_key4];\n    }\n    _classCallCheck(this, And);\n    // Flatten any Ands\n    children = children.reduce(function (accum, p) {\n      return accum.concat(p instanceof And ? p.children : p);\n    }, []);\n    return _super5.call.apply(_super5, [this].concat(_toConsumableArray(children)));\n  }\n  _createClass(And, [{\n    key: \"bind\",\n    value: function bind(batch) {\n      var bound = this.children.map(function (p) {\n        return p.bind(batch);\n      });\n      return function (idx, batch) {\n        return bound.every(function (p) {\n          return p(idx, batch);\n        });\n      };\n    }\n  }]);\n  return And;\n}(CombinationPredicate);\n/** @ignore */\nexport var Or = /*#__PURE__*/function (_CombinationPredicate2) {\n  _inherits(Or, _CombinationPredicate2);\n  var _super6 = _createSuper(Or);\n  function Or() {\n    for (var _len5 = arguments.length, children = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      children[_key5] = arguments[_key5];\n    }\n    _classCallCheck(this, Or);\n    // Flatten any Ors\n    children = children.reduce(function (accum, p) {\n      return accum.concat(p instanceof Or ? p.children : p);\n    }, []);\n    return _super6.call.apply(_super6, [this].concat(_toConsumableArray(children)));\n  }\n  _createClass(Or, [{\n    key: \"bind\",\n    value: function bind(batch) {\n      var bound = this.children.map(function (p) {\n        return p.bind(batch);\n      });\n      return function (idx, batch) {\n        return bound.some(function (p) {\n          return p(idx, batch);\n        });\n      };\n    }\n  }]);\n  return Or;\n}(CombinationPredicate);\n/** @ignore */\nexport var Equals = /*#__PURE__*/function (_ComparisonPredicate) {\n  _inherits(Equals, _ComparisonPredicate);\n  var _super7 = _createSuper(Equals);\n  function Equals() {\n    _classCallCheck(this, Equals);\n    return _super7.apply(this, arguments);\n  }\n  _createClass(Equals, [{\n    key: \"_bindLitLit\",\n    value: function _bindLitLit(_batch, left, right) {\n      var rtrn = left.v == right.v;\n      return function () {\n        return rtrn;\n      };\n    }\n  }, {\n    key: \"_bindColCol\",\n    value: function _bindColCol(batch, left, right) {\n      var left_func = left.bind(batch);\n      var right_func = right.bind(batch);\n      return function (idx, batch) {\n        return left_func(idx, batch) == right_func(idx, batch);\n      };\n    }\n  }, {\n    key: \"_bindColLit\",\n    value: function _bindColLit(batch, col, lit) {\n      var col_func = col.bind(batch);\n      if (col.vector instanceof DictionaryVector) {\n        var key;\n        var vector = col.vector;\n        if (vector.dictionary !== this.lastDictionary) {\n          key = vector.reverseLookup(lit.v);\n          this.lastDictionary = vector.dictionary;\n          this.lastKey = key;\n        } else {\n          key = this.lastKey;\n        }\n        if (key === -1) {\n          // the value doesn't exist in the dictionary - always return\n          // false\n          // TODO: special-case of PredicateFunc that encapsulates this\n          // \"always false\" behavior. That way filtering operations don't\n          // have to bother checking\n          return function () {\n            return false;\n          };\n        } else {\n          return function (idx) {\n            return vector.getKey(idx) === key;\n          };\n        }\n      } else {\n        return function (idx, cols) {\n          return col_func(idx, cols) == lit.v;\n        };\n      }\n    }\n  }, {\n    key: \"_bindLitCol\",\n    value: function _bindLitCol(batch, lit, col) {\n      // Equals is commutative\n      return this._bindColLit(batch, col, lit);\n    }\n  }]);\n  return Equals;\n}(ComparisonPredicate);\n/** @ignore */\nexport var LTeq = /*#__PURE__*/function (_ComparisonPredicate2) {\n  _inherits(LTeq, _ComparisonPredicate2);\n  var _super8 = _createSuper(LTeq);\n  function LTeq() {\n    _classCallCheck(this, LTeq);\n    return _super8.apply(this, arguments);\n  }\n  _createClass(LTeq, [{\n    key: \"_bindLitLit\",\n    value: function _bindLitLit(_batch, left, right) {\n      var rtrn = left.v <= right.v;\n      return function () {\n        return rtrn;\n      };\n    }\n  }, {\n    key: \"_bindColCol\",\n    value: function _bindColCol(batch, left, right) {\n      var left_func = left.bind(batch);\n      var right_func = right.bind(batch);\n      return function (idx, cols) {\n        return left_func(idx, cols) <= right_func(idx, cols);\n      };\n    }\n  }, {\n    key: \"_bindColLit\",\n    value: function _bindColLit(batch, col, lit) {\n      var col_func = col.bind(batch);\n      return function (idx, cols) {\n        return col_func(idx, cols) <= lit.v;\n      };\n    }\n  }, {\n    key: \"_bindLitCol\",\n    value: function _bindLitCol(batch, lit, col) {\n      var col_func = col.bind(batch);\n      return function (idx, cols) {\n        return lit.v <= col_func(idx, cols);\n      };\n    }\n  }]);\n  return LTeq;\n}(ComparisonPredicate);\n/** @ignore */\nexport var GTeq = /*#__PURE__*/function (_ComparisonPredicate3) {\n  _inherits(GTeq, _ComparisonPredicate3);\n  var _super9 = _createSuper(GTeq);\n  function GTeq() {\n    _classCallCheck(this, GTeq);\n    return _super9.apply(this, arguments);\n  }\n  _createClass(GTeq, [{\n    key: \"_bindLitLit\",\n    value: function _bindLitLit(_batch, left, right) {\n      var rtrn = left.v >= right.v;\n      return function () {\n        return rtrn;\n      };\n    }\n  }, {\n    key: \"_bindColCol\",\n    value: function _bindColCol(batch, left, right) {\n      var left_func = left.bind(batch);\n      var right_func = right.bind(batch);\n      return function (idx, cols) {\n        return left_func(idx, cols) >= right_func(idx, cols);\n      };\n    }\n  }, {\n    key: \"_bindColLit\",\n    value: function _bindColLit(batch, col, lit) {\n      var col_func = col.bind(batch);\n      return function (idx, cols) {\n        return col_func(idx, cols) >= lit.v;\n      };\n    }\n  }, {\n    key: \"_bindLitCol\",\n    value: function _bindLitCol(batch, lit, col) {\n      var col_func = col.bind(batch);\n      return function (idx, cols) {\n        return lit.v >= col_func(idx, cols);\n      };\n    }\n  }]);\n  return GTeq;\n}(ComparisonPredicate);\n/** @ignore */\nexport var Not = /*#__PURE__*/function (_Predicate3) {\n  _inherits(Not, _Predicate3);\n  var _super10 = _createSuper(Not);\n  function Not(child) {\n    var _this5;\n    _classCallCheck(this, Not);\n    _this5 = _super10.call(this);\n    _this5.child = child;\n    return _this5;\n  }\n  _createClass(Not, [{\n    key: \"bind\",\n    value: function bind(batch) {\n      var func = this.child.bind(batch);\n      return function (idx, batch) {\n        return !func(idx, batch);\n      };\n    }\n  }]);\n  return Not;\n}(Predicate);\n/** @ignore */\nexport var CustomPredicate = /*#__PURE__*/function (_Predicate4) {\n  _inherits(CustomPredicate, _Predicate4);\n  var _super11 = _createSuper(CustomPredicate);\n  function CustomPredicate(next, bind_) {\n    var _this6;\n    _classCallCheck(this, CustomPredicate);\n    _this6 = _super11.call(this);\n    _this6.next = next;\n    _this6.bind_ = bind_;\n    return _this6;\n  }\n  _createClass(CustomPredicate, [{\n    key: \"bind\",\n    value: function bind(batch) {\n      this.bind_(batch);\n      return this.next;\n    }\n  }]);\n  return CustomPredicate;\n}(Predicate);\nexport function lit(v) {\n  return new Literal(v);\n}\nexport function col(n) {\n  return new Col(n);\n}\nexport function and() {\n  for (var _len6 = arguments.length, p = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    p[_key6] = arguments[_key6];\n  }\n  return _construct(And, p);\n}\nexport function or() {\n  for (var _len7 = arguments.length, p = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n    p[_key7] = arguments[_key7];\n  }\n  return _construct(Or, p);\n}\nexport function custom(next, bind) {\n  return new CustomPredicate(next, bind);\n}","map":{"version":3,"sources":["compute/predicate.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to prototype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is commutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n"]},"metadata":{},"sourceType":"module"}