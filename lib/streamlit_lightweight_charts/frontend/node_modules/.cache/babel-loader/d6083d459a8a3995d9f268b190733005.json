{"ast":null,"code":"import _inherits from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nvar carryBit16 = 1 << 16;\n/** @ignore */\nfunction intAsHex(value) {\n  if (value < 0) {\n    value = 0xFFFFFFFF + value + 1;\n  }\n  return \"0x\".concat(value.toString(16));\n}\n/** @ignore */\nvar kInt32DecimalDigits = 8;\n/** @ignore */\nvar kPowersOfTen = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000];\n/** @ignore */\nexport var BaseInt64 = /*#__PURE__*/function () {\n  function BaseInt64(buffer) {\n    _classCallCheck(this, BaseInt64);\n    this.buffer = buffer;\n  }\n  _createClass(BaseInt64, [{\n    key: \"high\",\n    value: function high() {\n      return this.buffer[1];\n    }\n  }, {\n    key: \"low\",\n    value: function low() {\n      return this.buffer[0];\n    }\n  }, {\n    key: \"_times\",\n    value: function _times(other) {\n      // Break the left and right numbers into 16 bit chunks\n      // so that we can multiply them without overflow.\n      var L = new Uint32Array([this.buffer[1] >>> 16, this.buffer[1] & 0xFFFF, this.buffer[0] >>> 16, this.buffer[0] & 0xFFFF]);\n      var R = new Uint32Array([other.buffer[1] >>> 16, other.buffer[1] & 0xFFFF, other.buffer[0] >>> 16, other.buffer[0] & 0xFFFF]);\n      var product = L[3] * R[3];\n      this.buffer[0] = product & 0xFFFF;\n      var sum = product >>> 16;\n      product = L[2] * R[3];\n      sum += product;\n      product = L[3] * R[2] >>> 0;\n      sum += product;\n      this.buffer[0] += sum << 16;\n      this.buffer[1] = sum >>> 0 < product ? carryBit16 : 0;\n      this.buffer[1] += sum >>> 16;\n      this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n      this.buffer[1] += L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0] << 16;\n      return this;\n    }\n  }, {\n    key: \"_plus\",\n    value: function _plus(other) {\n      var sum = this.buffer[0] + other.buffer[0] >>> 0;\n      this.buffer[1] += other.buffer[1];\n      if (sum < this.buffer[0] >>> 0) {\n        ++this.buffer[1];\n      }\n      this.buffer[0] = sum;\n    }\n  }, {\n    key: \"lessThan\",\n    value: function lessThan(other) {\n      return this.buffer[1] < other.buffer[1] || this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0];\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n  }, {\n    key: \"greaterThan\",\n    value: function greaterThan(other) {\n      return other.lessThan(this);\n    }\n  }, {\n    key: \"hex\",\n    value: function hex() {\n      return \"\".concat(intAsHex(this.buffer[1]), \" \").concat(intAsHex(this.buffer[0]));\n    }\n  }]);\n  return BaseInt64;\n}();\n/** @ignore */\nexport var Uint64 = /*#__PURE__*/function (_BaseInt) {\n  _inherits(Uint64, _BaseInt);\n  var _super = _createSuper(Uint64);\n  function Uint64() {\n    _classCallCheck(this, Uint64);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Uint64, [{\n    key: \"times\",\n    value: function times(other) {\n      this._times(other);\n      return this;\n    }\n  }, {\n    key: \"plus\",\n    value: function plus(other) {\n      this._plus(other);\n      return this;\n    }\n    /** @nocollapse */\n  }], [{\n    key: \"from\",\n    value: function from(val) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n      return Uint64.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"fromNumber\",\n    value: function fromNumber(num) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n      // Always parse numbers as strings - pulling out high and low bits\n      // directly seems to lose precision sometimes\n      // For example:\n      //     > -4613034156400212000 >>> 0\n      //     721782784\n      // The correct lower 32-bits are 721782752\n      return Uint64.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"fromString\",\n    value: function fromString(str) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n      var length = str.length;\n      var out = new Uint64(out_buffer);\n      for (var posn = 0; posn < length;) {\n        var group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;\n        var chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n        var multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n        out.times(multiple);\n        out.plus(chunk);\n        posn += group;\n      }\n      return out;\n    }\n    /** @nocollapse */\n  }, {\n    key: \"convertArray\",\n    value: function convertArray(values) {\n      var data = new Uint32Array(values.length * 2);\n      for (var i = -1, n = values.length; ++i < n;) {\n        Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n      }\n      return data;\n    }\n    /** @nocollapse */\n  }, {\n    key: \"multiply\",\n    value: function multiply(left, right) {\n      var rtrn = new Uint64(new Uint32Array(left.buffer));\n      return rtrn.times(right);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"add\",\n    value: function add(left, right) {\n      var rtrn = new Uint64(new Uint32Array(left.buffer));\n      return rtrn.plus(right);\n    }\n  }]);\n  return Uint64;\n}(BaseInt64);\n/** @ignore */\nexport var Int64 = /*#__PURE__*/function (_BaseInt2) {\n  _inherits(Int64, _BaseInt2);\n  var _super2 = _createSuper(Int64);\n  function Int64() {\n    _classCallCheck(this, Int64);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(Int64, [{\n    key: \"negate\",\n    value: function negate() {\n      this.buffer[0] = ~this.buffer[0] + 1;\n      this.buffer[1] = ~this.buffer[1];\n      if (this.buffer[0] == 0) {\n        ++this.buffer[1];\n      }\n      return this;\n    }\n  }, {\n    key: \"times\",\n    value: function times(other) {\n      this._times(other);\n      return this;\n    }\n  }, {\n    key: \"plus\",\n    value: function plus(other) {\n      this._plus(other);\n      return this;\n    }\n  }, {\n    key: \"lessThan\",\n    value: function lessThan(other) {\n      // force high bytes to be signed\n      var this_high = this.buffer[1] << 0;\n      var other_high = other.buffer[1] << 0;\n      return this_high < other_high || this_high === other_high && this.buffer[0] < other.buffer[0];\n    }\n    /** @nocollapse */\n  }], [{\n    key: \"from\",\n    value: function from(val) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n      return Int64.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"fromNumber\",\n    value: function fromNumber(num) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n      // Always parse numbers as strings - pulling out high and low bits\n      // directly seems to lose precision sometimes\n      // For example:\n      //     > -4613034156400212000 >>> 0\n      //     721782784\n      // The correct lower 32-bits are 721782752\n      return Int64.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"fromString\",\n    value: function fromString(str) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n      // TODO: Assert that out_buffer is 0 and length = 2\n      var negate = str.startsWith('-');\n      var length = str.length;\n      var out = new Int64(out_buffer);\n      for (var posn = negate ? 1 : 0; posn < length;) {\n        var group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;\n        var chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n        var multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n        out.times(multiple);\n        out.plus(chunk);\n        posn += group;\n      }\n      return negate ? out.negate() : out;\n    }\n    /** @nocollapse */\n  }, {\n    key: \"convertArray\",\n    value: function convertArray(values) {\n      var data = new Uint32Array(values.length * 2);\n      for (var i = -1, n = values.length; ++i < n;) {\n        Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n      }\n      return data;\n    }\n    /** @nocollapse */\n  }, {\n    key: \"multiply\",\n    value: function multiply(left, right) {\n      var rtrn = new Int64(new Uint32Array(left.buffer));\n      return rtrn.times(right);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"add\",\n    value: function add(left, right) {\n      var rtrn = new Int64(new Uint32Array(left.buffer));\n      return rtrn.plus(right);\n    }\n  }]);\n  return Int64;\n}(BaseInt64);\n/** @ignore */\nexport var Int128 = /*#__PURE__*/function () {\n  function Int128(buffer) {\n    _classCallCheck(this, Int128);\n    this.buffer = buffer;\n    // buffer[3] MSB (high)\n    // buffer[2]\n    // buffer[1]\n    // buffer[0] LSB (low)\n  }\n  _createClass(Int128, [{\n    key: \"high\",\n    value: function high() {\n      return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n  }, {\n    key: \"low\",\n    value: function low() {\n      return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      this.buffer[0] = ~this.buffer[0] + 1;\n      this.buffer[1] = ~this.buffer[1];\n      this.buffer[2] = ~this.buffer[2];\n      this.buffer[3] = ~this.buffer[3];\n      if (this.buffer[0] == 0) {\n        ++this.buffer[1];\n      }\n      if (this.buffer[1] == 0) {\n        ++this.buffer[2];\n      }\n      if (this.buffer[2] == 0) {\n        ++this.buffer[3];\n      }\n      return this;\n    }\n  }, {\n    key: \"times\",\n    value: function times(other) {\n      // Break the left and right numbers into 32 bit chunks\n      // so that we can multiply them without overflow.\n      var L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));\n      var L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));\n      var L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));\n      var L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));\n      var R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n      var R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n      var R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n      var R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n      var product = Uint64.multiply(L3, R3);\n      this.buffer[0] = product.low();\n      var sum = new Uint64(new Uint32Array([product.high(), 0]));\n      product = Uint64.multiply(L2, R3);\n      sum.plus(product);\n      product = Uint64.multiply(L3, R2);\n      sum.plus(product);\n      this.buffer[1] = sum.low();\n      this.buffer[3] = sum.lessThan(product) ? 1 : 0;\n      this.buffer[2] = sum.high();\n      var high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n      high.plus(Uint64.multiply(L1, R3)).plus(Uint64.multiply(L2, R2)).plus(Uint64.multiply(L3, R1));\n      this.buffer[3] += Uint64.multiply(L0, R3).plus(Uint64.multiply(L1, R2)).plus(Uint64.multiply(L2, R1)).plus(Uint64.multiply(L3, R0)).low();\n      return this;\n    }\n  }, {\n    key: \"plus\",\n    value: function plus(other) {\n      var sums = new Uint32Array(4);\n      sums[3] = this.buffer[3] + other.buffer[3] >>> 0;\n      sums[2] = this.buffer[2] + other.buffer[2] >>> 0;\n      sums[1] = this.buffer[1] + other.buffer[1] >>> 0;\n      sums[0] = this.buffer[0] + other.buffer[0] >>> 0;\n      if (sums[0] < this.buffer[0] >>> 0) {\n        ++sums[1];\n      }\n      if (sums[1] < this.buffer[1] >>> 0) {\n        ++sums[2];\n      }\n      if (sums[2] < this.buffer[2] >>> 0) {\n        ++sums[3];\n      }\n      this.buffer[3] = sums[3];\n      this.buffer[2] = sums[2];\n      this.buffer[1] = sums[1];\n      this.buffer[0] = sums[0];\n      return this;\n    }\n  }, {\n    key: \"hex\",\n    value: function hex() {\n      return \"\".concat(intAsHex(this.buffer[3]), \" \").concat(intAsHex(this.buffer[2]), \" \").concat(intAsHex(this.buffer[1]), \" \").concat(intAsHex(this.buffer[0]));\n    }\n    /** @nocollapse */\n  }], [{\n    key: \"multiply\",\n    value: function multiply(left, right) {\n      var rtrn = new Int128(new Uint32Array(left.buffer));\n      return rtrn.times(right);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"add\",\n    value: function add(left, right) {\n      var rtrn = new Int128(new Uint32Array(left.buffer));\n      return rtrn.plus(right);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"from\",\n    value: function from(val) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(4);\n      return Int128.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"fromNumber\",\n    value: function fromNumber(num) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(4);\n      // Always parse numbers as strings - pulling out high and low bits\n      // directly seems to lose precision sometimes\n      // For example:\n      //     > -4613034156400212000 >>> 0\n      //     721782784\n      // The correct lower 32-bits are 721782752\n      return Int128.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"fromString\",\n    value: function fromString(str) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(4);\n      // TODO: Assert that out_buffer is 0 and length = 4\n      var negate = str.startsWith('-');\n      var length = str.length;\n      var out = new Int128(out_buffer);\n      for (var posn = negate ? 1 : 0; posn < length;) {\n        var group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;\n        var chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n        var multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n        out.times(multiple);\n        out.plus(chunk);\n        posn += group;\n      }\n      return negate ? out.negate() : out;\n    }\n    /** @nocollapse */\n  }, {\n    key: \"convertArray\",\n    value: function convertArray(values) {\n      // TODO: Distinguish between string and number at compile-time\n      var data = new Uint32Array(values.length * 4);\n      for (var i = -1, n = values.length; ++i < n;) {\n        Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n      }\n      return data;\n    }\n  }]);\n  return Int128;\n}();","map":{"version":3,"sources":["util/int.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}