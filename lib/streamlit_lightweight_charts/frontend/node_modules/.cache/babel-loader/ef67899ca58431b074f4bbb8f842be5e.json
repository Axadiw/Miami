{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { clampRange } from '../util/vector';\nimport { DataType } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { AbstractVector, Vector } from '../vector';\n/** @ignore */\nexport var Chunked = /*#__PURE__*/function (_AbstractVector, _Symbol$iterator) {\n  _inherits(Chunked, _AbstractVector);\n  var _super = _createSuper(Chunked);\n  function Chunked(type) {\n    var _this;\n    var chunks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var offsets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : calculateOffsets(chunks);\n    _classCallCheck(this, Chunked);\n    _this = _super.call(this);\n    _this._nullCount = -1;\n    _this._type = type;\n    _this._chunks = chunks;\n    _this._chunkOffsets = offsets;\n    _this._length = offsets[offsets.length - 1];\n    _this._numChildren = (_this._type.children || []).length;\n    return _this;\n  }\n  /** @nocollapse */\n  _createClass(Chunked, [{\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    }\n  }, {\n    key: \"chunks\",\n    get: function get() {\n      return this._chunks;\n    }\n  }, {\n    key: \"typeId\",\n    get: function get() {\n      return this._type.typeId;\n    }\n  }, {\n    key: \"VectorName\",\n    get: function get() {\n      return \"Chunked<\".concat(this._type, \">\");\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._chunks[0] ? this._chunks[0].data : null;\n    }\n  }, {\n    key: \"ArrayType\",\n    get: function get() {\n      return this._type.ArrayType;\n    }\n  }, {\n    key: \"numChildren\",\n    get: function get() {\n      return this._numChildren;\n    }\n  }, {\n    key: \"stride\",\n    get: function get() {\n      return this._chunks[0] ? this._chunks[0].stride : 1;\n    }\n  }, {\n    key: \"byteLength\",\n    get: function get() {\n      return this._chunks.reduce(function (byteLength, chunk) {\n        return byteLength + chunk.byteLength;\n      }, 0);\n    }\n  }, {\n    key: \"nullCount\",\n    get: function get() {\n      var nullCount = this._nullCount;\n      if (nullCount < 0) {\n        this._nullCount = nullCount = this._chunks.reduce(function (x, _ref) {\n          var nullCount = _ref.nullCount;\n          return x + nullCount;\n        }, 0);\n      }\n      return nullCount;\n    }\n  }, {\n    key: \"indices\",\n    get: function get() {\n      if (DataType.isDictionary(this._type)) {\n        if (!this._indices) {\n          var _chunks2 = this._chunks;\n          this._indices = _chunks2.length === 1 ? _chunks2[0].indices : Chunked.concat.apply(Chunked, _toConsumableArray(_chunks2.map(function (x) {\n            return x.indices;\n          })));\n        }\n        return this._indices;\n      }\n      return null;\n    }\n  }, {\n    key: \"dictionary\",\n    get: function get() {\n      if (DataType.isDictionary(this._type)) {\n        return this._chunks[this._chunks.length - 1].data.dictionary;\n      }\n      return null;\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n      var _iterator, _step, chunk;\n      return _regeneratorRuntime().wrap(function value$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _iterator = _createForOfIteratorHelper(this._chunks);\n            _context.prev = 1;\n            _iterator.s();\n          case 3:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 8;\n              break;\n            }\n            chunk = _step.value;\n            return _context.delegateYield(chunk, \"t0\", 6);\n          case 6:\n            _context.next = 3;\n            break;\n          case 8:\n            _context.next = 13;\n            break;\n          case 10:\n            _context.prev = 10;\n            _context.t1 = _context[\"catch\"](1);\n            _iterator.e(_context.t1);\n          case 13:\n            _context.prev = 13;\n            _iterator.f();\n            return _context.finish(13);\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }, value, this, [[1, 10, 13, 16]]);\n    })\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._chunks;\n      return new Chunked(this._type, chunks);\n    }\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n        others[_key] = arguments[_key];\n      }\n      return this.clone(Chunked.flatten.apply(Chunked, [this].concat(others)));\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(begin, end) {\n      return clampRange(this, begin, end, this._sliceInternal);\n    }\n  }, {\n    key: \"getChildAt\",\n    value: function getChildAt(index) {\n      if (index < 0 || index >= this._numChildren) {\n        return null;\n      }\n      var columns = this._children || (this._children = []);\n      var child, field, chunks;\n      if (child = columns[index]) {\n        return child;\n      }\n      if (field = (this._type.children || [])[index]) {\n        chunks = this._chunks.map(function (vector) {\n          return vector.getChildAt(index);\n        }).filter(function (vec) {\n          return vec != null;\n        });\n        if (chunks.length > 0) {\n          return columns[index] = new Chunked(field.type, chunks);\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"search\",\n    value: function search(index, then) {\n      var idx = index;\n      // binary search to find the child vector and value indices\n      var offsets = this._chunkOffsets,\n        rhs = offsets.length - 1;\n      // return early if out of bounds, or if there's just one child\n      if (idx < 0) {\n        return null;\n      }\n      if (idx >= offsets[rhs]) {\n        return null;\n      }\n      if (rhs <= 1) {\n        return then ? then(this, 0, idx) : [0, idx];\n      }\n      var lhs = 0,\n        pos = 0,\n        mid = 0;\n      do {\n        if (lhs + 1 === rhs) {\n          return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n        }\n        mid = lhs + (rhs - lhs) / 2 | 0;\n        idx >= offsets[mid] ? lhs = mid : rhs = mid;\n      } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n      return null;\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(index) {\n      return !!this.search(index, this.isValidInternal);\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this.search(index, this.getInternal);\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      this.search(index, function (_ref2, i, j) {\n        var chunks = _ref2.chunks;\n        return chunks[i].set(j, value);\n      });\n    }\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(element, offset) {\n      var _this2 = this;\n      if (offset && typeof offset === 'number') {\n        return this.search(offset, function (self, i, j) {\n          return _this2.indexOfInternal(self, i, j, element);\n        });\n      }\n      return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var chunks = this.chunks;\n      var n = chunks.length;\n      var ArrayType = this._type.ArrayType;\n      if (n <= 0) {\n        return new ArrayType(0);\n      }\n      if (n <= 1) {\n        return chunks[0].toArray();\n      }\n      var len = 0,\n        src = new Array(n);\n      for (var i = -1; ++i < n;) {\n        len += (src[i] = chunks[i].toArray()).length;\n      }\n      if (ArrayType !== src[0].constructor) {\n        ArrayType = src[0].constructor;\n      }\n      var dst = new ArrayType(len);\n      var set = ArrayType === Array ? arraySet : typedSet;\n      for (var _i = -1, idx = 0; ++_i < n;) {\n        idx = set(src[_i], dst, idx);\n      }\n      return dst;\n    }\n  }, {\n    key: \"getInternal\",\n    value: function getInternal(_ref3, i, j) {\n      var _chunks = _ref3._chunks;\n      return _chunks[i].get(j);\n    }\n  }, {\n    key: \"isValidInternal\",\n    value: function isValidInternal(_ref4, i, j) {\n      var _chunks = _ref4._chunks;\n      return _chunks[i].isValid(j);\n    }\n  }, {\n    key: \"indexOfInternal\",\n    value: function indexOfInternal(_ref5, chunkIndex, fromIndex, element) {\n      var _chunks = _ref5._chunks;\n      var i = chunkIndex - 1,\n        n = _chunks.length;\n      var start = fromIndex,\n        offset = 0,\n        found = -1;\n      while (++i < n) {\n        if (~(found = _chunks[i].indexOf(element, start))) {\n          return offset + found;\n        }\n        start = 0;\n        offset += _chunks[i].length;\n      }\n      return -1;\n    }\n  }, {\n    key: \"_sliceInternal\",\n    value: function _sliceInternal(self, begin, end) {\n      var slices = [];\n      var chunks = self.chunks,\n        chunkOffsets = self._chunkOffsets;\n      for (var i = -1, n = chunks.length; ++i < n;) {\n        var chunk = chunks[i];\n        var chunkLength = chunk.length;\n        var chunkOffset = chunkOffsets[i];\n        // If the child is to the right of the slice boundary, we can stop\n        if (chunkOffset >= end) {\n          break;\n        }\n        // If the child is to the left of of the slice boundary, exclude\n        if (begin >= chunkOffset + chunkLength) {\n          continue;\n        }\n        // If the child is between both left and right boundaries, include w/o slicing\n        if (chunkOffset >= begin && chunkOffset + chunkLength <= end) {\n          slices.push(chunk);\n          continue;\n        }\n        // If the child overlaps one of the slice boundaries, include that slice\n        var from = Math.max(0, begin - chunkOffset);\n        var to = Math.min(end - chunkOffset, chunkLength);\n        slices.push(chunk.slice(from, to));\n      }\n      return self.clone(slices);\n    }\n  }], [{\n    key: \"flatten\",\n    value: function flatten() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n      return selectChunkArgs(Vector, vectors);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      var chunks = Chunked.flatten.apply(Chunked, arguments);\n      return new Chunked(chunks[0].type, chunks);\n    }\n  }]);\n  return Chunked;\n}(AbstractVector, Symbol.iterator);\n/** @ignore */\nfunction calculateOffsets(vectors) {\n  var offsets = new Uint32Array((vectors || []).length + 1);\n  var offset = offsets[0] = 0,\n    length = offsets.length;\n  for (var index = 0; ++index < length;) {\n    offsets[index] = offset += vectors[index - 1].length;\n  }\n  return offsets;\n}\n/** @ignore */\nvar typedSet = function typedSet(src, dst, offset) {\n  dst.set(src, offset);\n  return offset + src.length;\n};\n/** @ignore */\nvar arraySet = function arraySet(src, dst, offset) {\n  var idx = offset;\n  for (var i = -1, n = src.length; ++i < n;) {\n    dst[idx++] = src[i];\n  }\n  return idx;\n};","map":{"version":3,"sources":["vector/chunked.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n"]},"metadata":{},"sourceType":"module"}