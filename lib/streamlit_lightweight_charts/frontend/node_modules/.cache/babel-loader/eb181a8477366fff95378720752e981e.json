{"ast":null,"code":"import _classCallCheck from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// automatically generated by the FlatBuffers compiler, do not modify\nimport * as NS7624605610262437867 from './Schema';\nexport var org;\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        flatbuf.Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        var MessageHeader;\n        (function (MessageHeader) {\n          MessageHeader[MessageHeader[\"NONE\"] = 0] = \"NONE\";\n          MessageHeader[MessageHeader[\"Schema\"] = 1] = \"Schema\";\n          MessageHeader[MessageHeader[\"DictionaryBatch\"] = 2] = \"DictionaryBatch\";\n          MessageHeader[MessageHeader[\"RecordBatch\"] = 3] = \"RecordBatch\";\n          MessageHeader[MessageHeader[\"Tensor\"] = 4] = \"Tensor\";\n          MessageHeader[MessageHeader[\"SparseTensor\"] = 5] = \"SparseTensor\";\n        })(MessageHeader = flatbuf.MessageHeader || (flatbuf.MessageHeader = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        var FieldNode = /*#__PURE__*/function () {\n          function FieldNode() {\n            _classCallCheck(this, FieldNode);\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FieldNode\n           */\n          _createClass(FieldNode, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * The number of value slots in the Arrow array at this level of a nested\n             * tree\n             *\n             * @returns flatbuffers.Long\n             */\n          }, {\n            key: \"length\",\n            value: function length() {\n              return this.bb.readInt64(this.bb_pos);\n            }\n            /**\n             * The number of observed nulls. Fields with null_count == 0 may choose not\n             * to write their physical validity bitmap out as a materialized buffer,\n             * instead setting the length of the bitmap buffer to 0.\n             *\n             * @returns flatbuffers.Long\n             */\n          }, {\n            key: \"nullCount\",\n            value: function nullCount() {\n              return this.bb.readInt64(this.bb_pos + 8);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Long length\n             * @param flatbuffers.Long null_count\n             * @returns flatbuffers.Offset\n             */\n          }], [{\n            key: \"createFieldNode\",\n            value: function createFieldNode(builder, length, null_count) {\n              builder.prep(8, 16);\n              builder.writeInt64(null_count);\n              builder.writeInt64(length);\n              return builder.offset();\n            }\n          }]);\n          return FieldNode;\n        }();\n        flatbuf.FieldNode = FieldNode;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        var RecordBatch = /*#__PURE__*/function () {\n          function RecordBatch() {\n            _classCallCheck(this, RecordBatch);\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns RecordBatch\n           */\n          _createClass(RecordBatch, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param RecordBatch= obj\n             * @returns RecordBatch\n             */\n          }, {\n            key: \"length\",\n            value:\n            /**\n             * number of records / rows. The arrays in the batch should all have this\n             * length\n             *\n             * @returns flatbuffers.Long\n             */\n            function length() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n              return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n            }\n            /**\n             * Nodes correspond to the pre-ordered flattened logical schema\n             *\n             * @param number index\n             * @param org.apache.arrow.flatbuf.FieldNode= obj\n             * @returns org.apache.arrow.flatbuf.FieldNode\n             */\n          }, {\n            key: \"nodes\",\n            value: function nodes(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n              return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n          }, {\n            key: \"nodesLength\",\n            value: function nodesLength() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * Buffers correspond to the pre-ordered flattened buffer tree\n             *\n             * The number of buffers appended to this list depends on the schema. For\n             * example, most primitive arrays will have 2 buffers, 1 for the validity\n             * bitmap and 1 for the values. For struct arrays, there will only be a\n             * single buffer for the validity (nulls) bitmap\n             *\n             * @param number index\n             * @param org.apache.arrow.flatbuf.Buffer= obj\n             * @returns org.apache.arrow.flatbuf.Buffer\n             */\n          }, {\n            key: \"buffers\",\n            value: function buffers(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n              return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n          }, {\n            key: \"buffersLength\",\n            value: function buffersLength() {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n          }], [{\n            key: \"getRootAsRecordBatch\",\n            value: function getRootAsRecordBatch(bb, obj) {\n              return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startRecordBatch\",\n            value: function startRecordBatch(builder) {\n              builder.startObject(3);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Long length\n             */\n          }, {\n            key: \"addLength\",\n            value: function addLength(builder, length) {\n              builder.addFieldInt64(0, length, builder.createLong(0, 0));\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset nodesOffset\n             */\n          }, {\n            key: \"addNodes\",\n            value: function addNodes(builder, nodesOffset) {\n              builder.addFieldOffset(1, nodesOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n          }, {\n            key: \"startNodesVector\",\n            value: function startNodesVector(builder, numElems) {\n              builder.startVector(16, numElems, 8);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset buffersOffset\n             */\n          }, {\n            key: \"addBuffers\",\n            value: function addBuffers(builder, buffersOffset) {\n              builder.addFieldOffset(2, buffersOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n          }, {\n            key: \"startBuffersVector\",\n            value: function startBuffersVector(builder, numElems) {\n              builder.startVector(16, numElems, 8);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n          }, {\n            key: \"endRecordBatch\",\n            value: function endRecordBatch(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createRecordBatch\",\n            value: function createRecordBatch(builder, length, nodesOffset, buffersOffset) {\n              RecordBatch.startRecordBatch(builder);\n              RecordBatch.addLength(builder, length);\n              RecordBatch.addNodes(builder, nodesOffset);\n              RecordBatch.addBuffers(builder, buffersOffset);\n              return RecordBatch.endRecordBatch(builder);\n            }\n          }]);\n          return RecordBatch;\n        }();\n        flatbuf.RecordBatch = RecordBatch;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        var DictionaryBatch = /*#__PURE__*/function () {\n          function DictionaryBatch() {\n            _classCallCheck(this, DictionaryBatch);\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns DictionaryBatch\n           */\n          _createClass(DictionaryBatch, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param DictionaryBatch= obj\n             * @returns DictionaryBatch\n             */\n          }, {\n            key: \"id\",\n            value:\n            /**\n             * @returns flatbuffers.Long\n             */\n            function id() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n              return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n            }\n            /**\n             * @param org.apache.arrow.flatbuf.RecordBatch= obj\n             * @returns org.apache.arrow.flatbuf.RecordBatch|null\n             */\n          }, {\n            key: \"data\",\n            value: function data(obj) {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n              return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n            }\n            /**\n             * If isDelta is true the values in the dictionary are to be appended to a\n             * dictionary with the indicated id\n             *\n             * @returns boolean\n             */\n          }, {\n            key: \"isDelta\",\n            value: function isDelta() {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n              return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n          }], [{\n            key: \"getRootAsDictionaryBatch\",\n            value: function getRootAsDictionaryBatch(bb, obj) {\n              return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startDictionaryBatch\",\n            value: function startDictionaryBatch(builder) {\n              builder.startObject(3);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Long id\n             */\n          }, {\n            key: \"addId\",\n            value: function addId(builder, id) {\n              builder.addFieldInt64(0, id, builder.createLong(0, 0));\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset dataOffset\n             */\n          }, {\n            key: \"addData\",\n            value: function addData(builder, dataOffset) {\n              builder.addFieldOffset(1, dataOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param boolean isDelta\n             */\n          }, {\n            key: \"addIsDelta\",\n            value: function addIsDelta(builder, isDelta) {\n              builder.addFieldInt8(2, +isDelta, +false);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n          }, {\n            key: \"endDictionaryBatch\",\n            value: function endDictionaryBatch(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createDictionaryBatch\",\n            value: function createDictionaryBatch(builder, id, dataOffset, isDelta) {\n              DictionaryBatch.startDictionaryBatch(builder);\n              DictionaryBatch.addId(builder, id);\n              DictionaryBatch.addData(builder, dataOffset);\n              DictionaryBatch.addIsDelta(builder, isDelta);\n              return DictionaryBatch.endDictionaryBatch(builder);\n            }\n          }]);\n          return DictionaryBatch;\n        }();\n        flatbuf.DictionaryBatch = DictionaryBatch;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        var Message = /*#__PURE__*/function () {\n          function Message() {\n            _classCallCheck(this, Message);\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Message\n           */\n          _createClass(Message, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Message= obj\n             * @returns Message\n             */\n          }, {\n            key: \"version\",\n            value:\n            /**\n             * @returns org.apache.arrow.flatbuf.MetadataVersion\n             */\n            function version() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n              return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n            }\n            /**\n             * @returns org.apache.arrow.flatbuf.MessageHeader\n             */\n          }, {\n            key: \"headerType\",\n            value: function headerType() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n              return offset ? /**  */this.bb.readUint8(this.bb_pos + offset) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n            }\n            /**\n             * @param flatbuffers.Table obj\n             * @returns ?flatbuffers.Table\n             */\n          }, {\n            key: \"header\",\n            value: function header(obj) {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n              return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n            }\n            /**\n             * @returns flatbuffers.Long\n             */\n          }, {\n            key: \"bodyLength\",\n            value: function bodyLength() {\n              var offset = this.bb.__offset(this.bb_pos, 10);\n              return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n            }\n            /**\n             * @param number index\n             * @param org.apache.arrow.flatbuf.KeyValue= obj\n             * @returns org.apache.arrow.flatbuf.KeyValue\n             */\n          }, {\n            key: \"customMetadata\",\n            value: function customMetadata(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 12);\n              return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n          }, {\n            key: \"customMetadataLength\",\n            value: function customMetadataLength() {\n              var offset = this.bb.__offset(this.bb_pos, 12);\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n          }], [{\n            key: \"getRootAsMessage\",\n            value: function getRootAsMessage(bb, obj) {\n              return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startMessage\",\n            value: function startMessage(builder) {\n              builder.startObject(5);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.MetadataVersion version\n             */\n          }, {\n            key: \"addVersion\",\n            value: function addVersion(builder, version) {\n              builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.MessageHeader headerType\n             */\n          }, {\n            key: \"addHeaderType\",\n            value: function addHeaderType(builder, headerType) {\n              builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset headerOffset\n             */\n          }, {\n            key: \"addHeader\",\n            value: function addHeader(builder, headerOffset) {\n              builder.addFieldOffset(2, headerOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Long bodyLength\n             */\n          }, {\n            key: \"addBodyLength\",\n            value: function addBodyLength(builder, bodyLength) {\n              builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset customMetadataOffset\n             */\n          }, {\n            key: \"addCustomMetadata\",\n            value: function addCustomMetadata(builder, customMetadataOffset) {\n              builder.addFieldOffset(4, customMetadataOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param Array.<flatbuffers.Offset> data\n             * @returns flatbuffers.Offset\n             */\n          }, {\n            key: \"createCustomMetadataVector\",\n            value: function createCustomMetadataVector(builder, data) {\n              builder.startVector(4, data.length, 4);\n              for (var i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n              }\n              return builder.endVector();\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n          }, {\n            key: \"startCustomMetadataVector\",\n            value: function startCustomMetadataVector(builder, numElems) {\n              builder.startVector(4, numElems, 4);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n          }, {\n            key: \"endMessage\",\n            value: function endMessage(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset offset\n             */\n          }, {\n            key: \"finishMessageBuffer\",\n            value: function finishMessageBuffer(builder, offset) {\n              builder.finish(offset);\n            }\n          }, {\n            key: \"createMessage\",\n            value: function createMessage(builder, version, headerType, headerOffset, bodyLength, customMetadataOffset) {\n              Message.startMessage(builder);\n              Message.addVersion(builder, version);\n              Message.addHeaderType(builder, headerType);\n              Message.addHeader(builder, headerOffset);\n              Message.addBodyLength(builder, bodyLength);\n              Message.addCustomMetadata(builder, customMetadataOffset);\n              return Message.endMessage(builder);\n            }\n          }]);\n          return Message;\n        }();\n        flatbuf.Message = Message;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));","map":{"version":3,"sources":["fb/Message.ts"],"names":[],"mappings":"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","sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MessageHeader {\n        NONE = 0,\n        Schema = 1,\n        DictionaryBatch = 2,\n        RecordBatch = 3,\n        Tensor = 4,\n        SparseTensor = 5\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FieldNode {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FieldNode\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The number of value slots in the Arrow array at this level of a nested\n         * tree\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The number of observed nulls. Fields with null_count == 0 may choose not\n         * to write their physical validity bitmap out as a materialized buffer,\n         * instead setting the length of the bitmap buffer to 0.\n         *\n         * @returns flatbuffers.Long\n         */\n        nullCount(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         * @param flatbuffers.Long null_count\n         * @returns flatbuffers.Offset\n         */\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class RecordBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns RecordBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * number of records / rows. The arrays in the batch should all have this\n         * length\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * Nodes correspond to the pre-ordered flattened logical schema\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\n         * @returns org.apache.arrow.flatbuf.FieldNode\n         */\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        nodesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Buffers correspond to the pre-ordered flattened buffer tree\n         *\n         * The number of buffers appended to this list depends on the schema. For\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\n         * bitmap and 1 for the values. For struct arrays, there will only be a\n         * single buffer for the validity (nulls) bitmap\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Buffer= obj\n         * @returns org.apache.arrow.flatbuf.Buffer\n         */\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        buffersLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startRecordBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         */\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nodesOffset\n         */\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset buffersOffset\n         */\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n        }\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\n         */\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * If isDelta is true the values in the dictionary are to be appended to a\n         * dictionary with the indicated id\n         *\n         * @returns boolean\n         */\n        isDelta(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isDelta\n         */\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n            builder.addFieldInt8(2, +isDelta, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Message {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Message\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MessageHeader\n         */\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n        }\n\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        header<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMessage(builder: flatbuffers.Builder) {\n            builder.startObject(5);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\n         */\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset headerOffset\n         */\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long bodyLength\n         */\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}