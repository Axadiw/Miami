{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _get from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _asyncToGenerator from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapAsyncGenerator from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport _awaitAsyncGenerator from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _asyncGeneratorDelegate from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate\";\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(readAllSync);\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport streamAdapters from '../io/adapters';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { ITERATOR_DONE, ReadableInterop } from '../io/interfaces';\nimport { MessageReader, AsyncMessageReader, JSONMessageReader, checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding } from './message';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, isArrowJSON, isFileHandle, isFetchResponse, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\nexport var RecordBatchReader = /*#__PURE__*/function (_ReadableInterop, _Symbol$iterator, _Symbol$asyncIterator) {\n  _inherits(RecordBatchReader, _ReadableInterop);\n  var _super = _createSuper(RecordBatchReader);\n  function RecordBatchReader(impl) {\n    var _this2;\n    _classCallCheck(this, RecordBatchReader);\n    _this2 = _super.call(this);\n    _this2._impl = impl;\n    return _this2;\n  }\n  _createClass(RecordBatchReader, [{\n    key: \"closed\",\n    get: function get() {\n      return this._impl.closed;\n    }\n  }, {\n    key: \"schema\",\n    get: function get() {\n      return this._impl.schema;\n    }\n  }, {\n    key: \"autoDestroy\",\n    get: function get() {\n      return this._impl.autoDestroy;\n    }\n  }, {\n    key: \"dictionaries\",\n    get: function get() {\n      return this._impl.dictionaries;\n    }\n  }, {\n    key: \"numDictionaries\",\n    get: function get() {\n      return this._impl.numDictionaries;\n    }\n  }, {\n    key: \"numRecordBatches\",\n    get: function get() {\n      return this._impl.numRecordBatches;\n    }\n  }, {\n    key: \"footer\",\n    get: function get() {\n      return this._impl.isFile() ? this._impl.footer : null;\n    }\n  }, {\n    key: \"isSync\",\n    value: function isSync() {\n      return this._impl.isSync();\n    }\n  }, {\n    key: \"isAsync\",\n    value: function isAsync() {\n      return this._impl.isAsync();\n    }\n  }, {\n    key: \"isFile\",\n    value: function isFile() {\n      return this._impl.isFile();\n    }\n  }, {\n    key: \"isStream\",\n    value: function isStream() {\n      return this._impl.isStream();\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      return this._impl.next();\n    }\n  }, {\n    key: \"throw\",\n    value: function _throw(value) {\n      return this._impl.throw(value);\n    }\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      return this._impl.return(value);\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      return this._impl.cancel();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(schema) {\n      this._impl.reset(schema);\n      this._DOMStream = undefined;\n      this._nodeStream = undefined;\n      return this;\n    }\n  }, {\n    key: \"open\",\n    value: function open(options) {\n      var _this3 = this;\n      var opening = this._impl.open(options);\n      return isPromise(opening) ? opening.then(function () {\n        return _this3;\n      }) : this;\n    }\n  }, {\n    key: \"readRecordBatch\",\n    value: function readRecordBatch(index) {\n      return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      return this._impl[Symbol.iterator]();\n    }\n  }, {\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      return this._impl[Symbol.asyncIterator]();\n    }\n  }, {\n    key: \"toDOMStream\",\n    value: function toDOMStream() {\n      var _this4 = this;\n      return streamAdapters.toDOMStream(this.isSync() ? _defineProperty({}, Symbol.iterator, function () {\n        return _this4;\n      }) : _defineProperty({}, Symbol.asyncIterator, function () {\n        return _this4;\n      }));\n    }\n  }, {\n    key: \"toNodeStream\",\n    value: function toNodeStream() {\n      var _this5 = this;\n      return streamAdapters.toNodeStream(this.isSync() ? _defineProperty({}, Symbol.iterator, function () {\n        return _this5;\n      }) : _defineProperty({}, Symbol.asyncIterator, function () {\n        return _this5;\n      }), {\n        objectMode: true\n      });\n    }\n    /** @nocollapse */\n    // @ts-ignore\n  }], [{\n    key: \"throughNode\",\n    value: function throughNode(options) {\n      throw new Error(\"\\\"throughNode\\\" not available in this environment\");\n    }\n    /** @nocollapse */\n  }, {\n    key: \"throughDOM\",\n    value: function throughDOM(\n    // @ts-ignore\n    writableStrategy,\n    // @ts-ignore\n    readableStrategy) {\n      throw new Error(\"\\\"throughDOM\\\" not available in this environment\");\n    }\n    /** @nocollapse */\n  }, {\n    key: \"from\",\n    value: function from(source) {\n      if (source instanceof RecordBatchReader) {\n        return source;\n      } else if (isArrowJSON(source)) {\n        return fromArrowJSON(source);\n      } else if (isFileHandle(source)) {\n        return fromFileHandle(source);\n      } else if (isPromise(source)) {\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = RecordBatchReader;\n                _context.next = 3;\n                return source;\n              case 3:\n                _context.t1 = _context.sent;\n                _context.next = 6;\n                return _context.t0.from.call(_context.t0, _context.t1);\n              case 6:\n                return _context.abrupt(\"return\", _context.sent);\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        }))();\n      } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n        return fromAsyncByteStream(new AsyncByteStream(source));\n      }\n      return fromByteStream(new ByteStream(source));\n    }\n    /** @nocollapse */\n  }, {\n    key: \"readAll\",\n    value: function readAll(source) {\n      if (source instanceof RecordBatchReader) {\n        return source.isSync() ? readAllSync(source) : readAllAsync(source);\n      } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable(source) || isIteratorResult(source)) {\n        return readAllSync(source);\n      }\n      return readAllAsync(source);\n    }\n  }]);\n  return RecordBatchReader;\n}(ReadableInterop, Symbol.iterator, Symbol.asyncIterator);\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n/** @ignore */\nexport var RecordBatchStreamReader = /*#__PURE__*/function (_RecordBatchReader, _Symbol$iterator2, _Symbol$asyncIterator2) {\n  _inherits(RecordBatchStreamReader, _RecordBatchReader);\n  var _super2 = _createSuper(RecordBatchStreamReader);\n  function RecordBatchStreamReader(_impl) {\n    var _this6;\n    _classCallCheck(this, RecordBatchStreamReader);\n    _this6 = _super2.call(this, _impl);\n    _this6._impl = _impl;\n    return _this6;\n  }\n  _createClass(RecordBatchStreamReader, [{\n    key: _Symbol$iterator2,\n    value: function value() {\n      return this._impl[Symbol.iterator]();\n    }\n  }, {\n    key: _Symbol$asyncIterator2,\n    value: function value() {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this[Symbol.iterator]()), _awaitAsyncGenerator), \"t0\", 1);\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    }\n  }]);\n  return RecordBatchStreamReader;\n}(RecordBatchReader, Symbol.iterator, Symbol.asyncIterator);\n/** @ignore */\nexport var AsyncRecordBatchStreamReader = /*#__PURE__*/function (_RecordBatchReader2, _Symbol$iterator3, _Symbol$asyncIterator3) {\n  _inherits(AsyncRecordBatchStreamReader, _RecordBatchReader2);\n  var _super3 = _createSuper(AsyncRecordBatchStreamReader);\n  function AsyncRecordBatchStreamReader(_impl) {\n    var _this7;\n    _classCallCheck(this, AsyncRecordBatchStreamReader);\n    _this7 = _super3.call(this, _impl);\n    _this7._impl = _impl;\n    return _this7;\n  }\n  _createClass(AsyncRecordBatchStreamReader, [{\n    key: _Symbol$iterator3,\n    value: function value() {\n      throw new Error(\"AsyncRecordBatchStreamReader is not Iterable\");\n    }\n  }, {\n    key: _Symbol$asyncIterator3,\n    value: function value() {\n      return this._impl[Symbol.asyncIterator]();\n    }\n  }]);\n  return AsyncRecordBatchStreamReader;\n}(RecordBatchReader, Symbol.iterator, Symbol.asyncIterator);\n/** @ignore */\nexport var RecordBatchFileReader = /*#__PURE__*/function (_RecordBatchStreamRea) {\n  _inherits(RecordBatchFileReader, _RecordBatchStreamRea);\n  var _super4 = _createSuper(RecordBatchFileReader);\n  function RecordBatchFileReader(_impl) {\n    var _this8;\n    _classCallCheck(this, RecordBatchFileReader);\n    _this8 = _super4.call(this, _impl);\n    _this8._impl = _impl;\n    return _this8;\n  }\n  return _createClass(RecordBatchFileReader);\n}(RecordBatchStreamReader);\n/** @ignore */\nexport var AsyncRecordBatchFileReader = /*#__PURE__*/function (_AsyncRecordBatchStre) {\n  _inherits(AsyncRecordBatchFileReader, _AsyncRecordBatchStre);\n  var _super5 = _createSuper(AsyncRecordBatchFileReader);\n  function AsyncRecordBatchFileReader(_impl) {\n    var _this9;\n    _classCallCheck(this, AsyncRecordBatchFileReader);\n    _this9 = _super5.call(this, _impl);\n    _this9._impl = _impl;\n    return _this9;\n  }\n  return _createClass(AsyncRecordBatchFileReader);\n}(AsyncRecordBatchStreamReader);\n/** @ignore */\nvar RecordBatchReaderImpl = /*#__PURE__*/function () {\n  function RecordBatchReaderImpl() {\n    var dictionaries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();\n    _classCallCheck(this, RecordBatchReaderImpl);\n    this.closed = false;\n    this.autoDestroy = true;\n    this._dictionaryIndex = 0;\n    this._recordBatchIndex = 0;\n    this.dictionaries = dictionaries;\n  }\n  _createClass(RecordBatchReaderImpl, [{\n    key: \"numDictionaries\",\n    get: function get() {\n      return this._dictionaryIndex;\n    }\n  }, {\n    key: \"numRecordBatches\",\n    get: function get() {\n      return this._recordBatchIndex;\n    }\n  }, {\n    key: \"isSync\",\n    value: function isSync() {\n      return false;\n    }\n  }, {\n    key: \"isAsync\",\n    value: function isAsync() {\n      return false;\n    }\n  }, {\n    key: \"isFile\",\n    value: function isFile() {\n      return false;\n    }\n  }, {\n    key: \"isStream\",\n    value: function isStream() {\n      return false;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(schema) {\n      this._dictionaryIndex = 0;\n      this._recordBatchIndex = 0;\n      this.schema = schema;\n      this.dictionaries = new Map();\n      return this;\n    }\n  }, {\n    key: \"_loadRecordBatch\",\n    value: function _loadRecordBatch(header, body) {\n      return new RecordBatch(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n  }, {\n    key: \"_loadDictionaryBatch\",\n    value: function _loadDictionaryBatch(header, body) {\n      var id = header.id,\n        isDelta = header.isDelta,\n        data = header.data;\n      var dictionaries = this.dictionaries,\n        schema = this.schema;\n      var dictionary = dictionaries.get(id);\n      if (isDelta || !dictionary) {\n        var type = schema.dictionaries.get(id);\n        return dictionary && isDelta ? dictionary.concat(Vector.new(this._loadVectors(data, body, [type])[0])) : Vector.new(this._loadVectors(data, body, [type])[0]);\n      }\n      return dictionary;\n    }\n  }, {\n    key: \"_loadVectors\",\n    value: function _loadVectors(header, body, types) {\n      return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n  }]);\n  return RecordBatchReaderImpl;\n}();\n/** @ignore */\nvar RecordBatchStreamReaderImpl = /*#__PURE__*/function (_RecordBatchReaderImp, _Symbol$iterator4) {\n  _inherits(RecordBatchStreamReaderImpl, _RecordBatchReaderImp);\n  var _super6 = _createSuper(RecordBatchStreamReaderImpl);\n  function RecordBatchStreamReaderImpl(source, dictionaries) {\n    var _this10;\n    _classCallCheck(this, RecordBatchStreamReaderImpl);\n    _this10 = _super6.call(this, dictionaries);\n    _this10._reader = !isArrowJSON(source) ? new MessageReader(_this10._handle = source) : new JSONMessageReader(_this10._handle = source);\n    return _this10;\n  }\n  _createClass(RecordBatchStreamReaderImpl, [{\n    key: \"isSync\",\n    value: function isSync() {\n      return true;\n    }\n  }, {\n    key: \"isStream\",\n    value: function isStream() {\n      return true;\n    }\n  }, {\n    key: _Symbol$iterator4,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this.closed && (this.closed = true)) {\n        this.reset()._reader.return();\n        this._reader = null;\n        this.dictionaries = null;\n      }\n    }\n  }, {\n    key: \"open\",\n    value: function open(options) {\n      if (!this.closed) {\n        this.autoDestroy = shouldAutoDestroy(this, options);\n        if (!(this.schema || (this.schema = this._reader.readSchema()))) {\n          this.cancel();\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"throw\",\n    value: function _throw(value) {\n      if (!this.closed && this.autoDestroy && (this.closed = true)) {\n        return this.reset()._reader.throw(value);\n      }\n      return ITERATOR_DONE;\n    }\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      if (!this.closed && this.autoDestroy && (this.closed = true)) {\n        return this.reset()._reader.return(value);\n      }\n      return ITERATOR_DONE;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      if (this.closed) {\n        return ITERATOR_DONE;\n      }\n      var message,\n        reader = this._reader;\n      while (message = this._readNextMessageAndValidate()) {\n        if (message.isSchema()) {\n          this.reset(message.header());\n        } else if (message.isRecordBatch()) {\n          this._recordBatchIndex++;\n          var header = message.header();\n          var buffer = reader.readMessageBody(message.bodyLength);\n          var recordBatch = this._loadRecordBatch(header, buffer);\n          return {\n            done: false,\n            value: recordBatch\n          };\n        } else if (message.isDictionaryBatch()) {\n          this._dictionaryIndex++;\n          var _header = message.header();\n          var _buffer = reader.readMessageBody(message.bodyLength);\n          var vector = this._loadDictionaryBatch(_header, _buffer);\n          this.dictionaries.set(_header.id, vector);\n        }\n      }\n      if (this.schema && this._recordBatchIndex === 0) {\n        this._recordBatchIndex++;\n        return {\n          done: false,\n          value: new _InternalEmptyPlaceholderRecordBatch(this.schema)\n        };\n      }\n      return this.return();\n    }\n  }, {\n    key: \"_readNextMessageAndValidate\",\n    value: function _readNextMessageAndValidate(type) {\n      return this._reader.readMessage(type);\n    }\n  }]);\n  return RecordBatchStreamReaderImpl;\n}(RecordBatchReaderImpl, Symbol.iterator);\n/** @ignore */\nvar AsyncRecordBatchStreamReaderImpl = /*#__PURE__*/function (_RecordBatchReaderImp2, _Symbol$asyncIterator4) {\n  _inherits(AsyncRecordBatchStreamReaderImpl, _RecordBatchReaderImp2);\n  var _super7 = _createSuper(AsyncRecordBatchStreamReaderImpl);\n  function AsyncRecordBatchStreamReaderImpl(source, dictionaries) {\n    var _this11;\n    _classCallCheck(this, AsyncRecordBatchStreamReaderImpl);\n    _this11 = _super7.call(this, dictionaries);\n    _this11._reader = new AsyncMessageReader(_this11._handle = source);\n    return _this11;\n  }\n  _createClass(AsyncRecordBatchStreamReaderImpl, [{\n    key: \"isAsync\",\n    value: function isAsync() {\n      return true;\n    }\n  }, {\n    key: \"isStream\",\n    value: function isStream() {\n      return true;\n    }\n  }, {\n    key: _Symbol$asyncIterator4,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"cancel\",\n    value: function () {\n      var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(!this.closed && (this.closed = true))) {\n                _context3.next = 5;\n                break;\n              }\n              _context3.next = 3;\n              return this.reset()._reader.return();\n            case 3:\n              this._reader = null;\n              this.dictionaries = null;\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function cancel() {\n        return _cancel.apply(this, arguments);\n      }\n      return cancel;\n    }()\n  }, {\n    key: \"open\",\n    value: function () {\n      var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(options) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (this.closed) {\n                _context4.next = 10;\n                break;\n              }\n              this.autoDestroy = shouldAutoDestroy(this, options);\n              _context4.t0 = this.schema;\n              if (_context4.t0) {\n                _context4.next = 7;\n                break;\n              }\n              _context4.next = 6;\n              return this._reader.readSchema();\n            case 6:\n              _context4.t0 = this.schema = _context4.sent;\n            case 7:\n              if (_context4.t0) {\n                _context4.next = 10;\n                break;\n              }\n              _context4.next = 10;\n              return this.cancel();\n            case 10:\n              return _context4.abrupt(\"return\", this);\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function open(_x2) {\n        return _open.apply(this, arguments);\n      }\n      return open;\n    }()\n  }, {\n    key: \"throw\",\n    value: function () {\n      var _throw2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(value) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!(!this.closed && this.autoDestroy && (this.closed = true))) {\n                _context5.next = 4;\n                break;\n              }\n              _context5.next = 3;\n              return this.reset()._reader.throw(value);\n            case 3:\n              return _context5.abrupt(\"return\", _context5.sent);\n            case 4:\n              return _context5.abrupt(\"return\", ITERATOR_DONE);\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function _throw(_x3) {\n        return _throw2.apply(this, arguments);\n      }\n      return _throw;\n    }()\n  }, {\n    key: \"return\",\n    value: function () {\n      var _return2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(value) {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(!this.closed && this.autoDestroy && (this.closed = true))) {\n                _context6.next = 4;\n                break;\n              }\n              _context6.next = 3;\n              return this.reset()._reader.return(value);\n            case 3:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 4:\n              return _context6.abrupt(\"return\", ITERATOR_DONE);\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function _return(_x4) {\n        return _return2.apply(this, arguments);\n      }\n      return _return;\n    }()\n  }, {\n    key: \"next\",\n    value: function () {\n      var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var message, reader, header, buffer, recordBatch, _header2, _buffer2, vector;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!this.closed) {\n                _context7.next = 2;\n                break;\n              }\n              return _context7.abrupt(\"return\", ITERATOR_DONE);\n            case 2:\n              reader = this._reader;\n            case 3:\n              _context7.next = 5;\n              return this._readNextMessageAndValidate();\n            case 5:\n              if (!(message = _context7.sent)) {\n                _context7.next = 31;\n                break;\n              }\n              if (!message.isSchema()) {\n                _context7.next = 11;\n                break;\n              }\n              _context7.next = 9;\n              return this.reset(message.header());\n            case 9:\n              _context7.next = 29;\n              break;\n            case 11:\n              if (!message.isRecordBatch()) {\n                _context7.next = 21;\n                break;\n              }\n              this._recordBatchIndex++;\n              header = message.header();\n              _context7.next = 16;\n              return reader.readMessageBody(message.bodyLength);\n            case 16:\n              buffer = _context7.sent;\n              recordBatch = this._loadRecordBatch(header, buffer);\n              return _context7.abrupt(\"return\", {\n                done: false,\n                value: recordBatch\n              });\n            case 21:\n              if (!message.isDictionaryBatch()) {\n                _context7.next = 29;\n                break;\n              }\n              this._dictionaryIndex++;\n              _header2 = message.header();\n              _context7.next = 26;\n              return reader.readMessageBody(message.bodyLength);\n            case 26:\n              _buffer2 = _context7.sent;\n              vector = this._loadDictionaryBatch(_header2, _buffer2);\n              this.dictionaries.set(_header2.id, vector);\n            case 29:\n              _context7.next = 3;\n              break;\n            case 31:\n              if (!(this.schema && this._recordBatchIndex === 0)) {\n                _context7.next = 34;\n                break;\n              }\n              this._recordBatchIndex++;\n              return _context7.abrupt(\"return\", {\n                done: false,\n                value: new _InternalEmptyPlaceholderRecordBatch(this.schema)\n              });\n            case 34:\n              _context7.next = 36;\n              return this.return();\n            case 36:\n              return _context7.abrupt(\"return\", _context7.sent);\n            case 37:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function next() {\n        return _next.apply(this, arguments);\n      }\n      return next;\n    }()\n  }, {\n    key: \"_readNextMessageAndValidate\",\n    value: function () {\n      var _readNextMessageAndValidate2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(type) {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this._reader.readMessage(type);\n            case 2:\n              return _context8.abrupt(\"return\", _context8.sent);\n            case 3:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function _readNextMessageAndValidate(_x5) {\n        return _readNextMessageAndValidate2.apply(this, arguments);\n      }\n      return _readNextMessageAndValidate;\n    }()\n  }]);\n  return AsyncRecordBatchStreamReaderImpl;\n}(RecordBatchReaderImpl, Symbol.asyncIterator);\n/** @ignore */\nvar RecordBatchFileReaderImpl = /*#__PURE__*/function (_RecordBatchStreamRea2) {\n  _inherits(RecordBatchFileReaderImpl, _RecordBatchStreamRea2);\n  var _super8 = _createSuper(RecordBatchFileReaderImpl);\n  function RecordBatchFileReaderImpl(source, dictionaries) {\n    _classCallCheck(this, RecordBatchFileReaderImpl);\n    return _super8.call(this, source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n  }\n  _createClass(RecordBatchFileReaderImpl, [{\n    key: \"footer\",\n    get: function get() {\n      return this._footer;\n    }\n  }, {\n    key: \"numDictionaries\",\n    get: function get() {\n      return this._footer ? this._footer.numDictionaries : 0;\n    }\n  }, {\n    key: \"numRecordBatches\",\n    get: function get() {\n      return this._footer ? this._footer.numRecordBatches : 0;\n    }\n  }, {\n    key: \"isSync\",\n    value: function isSync() {\n      return true;\n    }\n  }, {\n    key: \"isFile\",\n    value: function isFile() {\n      return true;\n    }\n  }, {\n    key: \"open\",\n    value: function open(options) {\n      if (!this.closed && !this._footer) {\n        this.schema = (this._footer = this._readFooter()).schema;\n        var _iterator = _createForOfIteratorHelper(this._footer.dictionaryBatches()),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var block = _step.value;\n            block && this._readDictionaryBatch(this._dictionaryIndex++);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      return _get(_getPrototypeOf(RecordBatchFileReaderImpl.prototype), \"open\", this).call(this, options);\n    }\n  }, {\n    key: \"readRecordBatch\",\n    value: function readRecordBatch(index) {\n      if (this.closed) {\n        return null;\n      }\n      if (!this._footer) {\n        this.open();\n      }\n      var block = this._footer && this._footer.getRecordBatch(index);\n      if (block && this._handle.seek(block.offset)) {\n        var message = this._reader.readMessage(MessageHeader.RecordBatch);\n        if (message && message.isRecordBatch()) {\n          var header = message.header();\n          var buffer = this._reader.readMessageBody(message.bodyLength);\n          var recordBatch = this._loadRecordBatch(header, buffer);\n          return recordBatch;\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"_readDictionaryBatch\",\n    value: function _readDictionaryBatch(index) {\n      var block = this._footer && this._footer.getDictionaryBatch(index);\n      if (block && this._handle.seek(block.offset)) {\n        var message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n        if (message && message.isDictionaryBatch()) {\n          var header = message.header();\n          var buffer = this._reader.readMessageBody(message.bodyLength);\n          var vector = this._loadDictionaryBatch(header, buffer);\n          this.dictionaries.set(header.id, vector);\n        }\n      }\n    }\n  }, {\n    key: \"_readFooter\",\n    value: function _readFooter() {\n      var _handle = this._handle;\n      var offset = _handle.size - magicAndPadding;\n      var length = _handle.readInt32(offset);\n      var buffer = _handle.readAt(offset - length, length);\n      return Footer.decode(buffer);\n    }\n  }, {\n    key: \"_readNextMessageAndValidate\",\n    value: function _readNextMessageAndValidate(type) {\n      if (!this._footer) {\n        this.open();\n      }\n      if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n        var block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n        if (block && this._handle.seek(block.offset)) {\n          return this._reader.readMessage(type);\n        }\n      }\n      return null;\n    }\n  }]);\n  return RecordBatchFileReaderImpl;\n}(RecordBatchStreamReaderImpl);\n/** @ignore */\nvar AsyncRecordBatchFileReaderImpl = /*#__PURE__*/function (_AsyncRecordBatchStre2) {\n  _inherits(AsyncRecordBatchFileReaderImpl, _AsyncRecordBatchStre2);\n  var _super9 = _createSuper(AsyncRecordBatchFileReaderImpl);\n  function AsyncRecordBatchFileReaderImpl(source) {\n    _classCallCheck(this, AsyncRecordBatchFileReaderImpl);\n    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      rest[_key - 1] = arguments[_key];\n    }\n    var byteLength = typeof rest[0] !== 'number' ? rest.shift() : undefined;\n    var dictionaries = rest[0] instanceof Map ? rest.shift() : undefined;\n    return _super9.call(this, source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n  }\n  _createClass(AsyncRecordBatchFileReaderImpl, [{\n    key: \"footer\",\n    get: function get() {\n      return this._footer;\n    }\n  }, {\n    key: \"numDictionaries\",\n    get: function get() {\n      return this._footer ? this._footer.numDictionaries : 0;\n    }\n  }, {\n    key: \"numRecordBatches\",\n    get: function get() {\n      return this._footer ? this._footer.numRecordBatches : 0;\n    }\n  }, {\n    key: \"isFile\",\n    value: function isFile() {\n      return true;\n    }\n  }, {\n    key: \"isAsync\",\n    value: function isAsync() {\n      return true;\n    }\n  }, {\n    key: \"open\",\n    value: function () {\n      var _open2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(options) {\n        var _iterator2, _step2, block;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(!this.closed && !this._footer)) {\n                _context9.next = 23;\n                break;\n              }\n              _context9.next = 3;\n              return this._readFooter();\n            case 3:\n              this.schema = (this._footer = _context9.sent).schema;\n              _iterator2 = _createForOfIteratorHelper(this._footer.dictionaryBatches());\n              _context9.prev = 5;\n              _iterator2.s();\n            case 7:\n              if ((_step2 = _iterator2.n()).done) {\n                _context9.next = 15;\n                break;\n              }\n              block = _step2.value;\n              _context9.t0 = block;\n              if (!_context9.t0) {\n                _context9.next = 13;\n                break;\n              }\n              _context9.next = 13;\n              return this._readDictionaryBatch(this._dictionaryIndex++);\n            case 13:\n              _context9.next = 7;\n              break;\n            case 15:\n              _context9.next = 20;\n              break;\n            case 17:\n              _context9.prev = 17;\n              _context9.t1 = _context9[\"catch\"](5);\n              _iterator2.e(_context9.t1);\n            case 20:\n              _context9.prev = 20;\n              _iterator2.f();\n              return _context9.finish(20);\n            case 23:\n              _context9.next = 25;\n              return _get(_getPrototypeOf(AsyncRecordBatchFileReaderImpl.prototype), \"open\", this).call(this, options);\n            case 25:\n              return _context9.abrupt(\"return\", _context9.sent);\n            case 26:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[5, 17, 20, 23]]);\n      }));\n      function open(_x6) {\n        return _open2.apply(this, arguments);\n      }\n      return open;\n    }()\n  }, {\n    key: \"readRecordBatch\",\n    value: function () {\n      var _readRecordBatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(index) {\n        var block, message, header, buffer, recordBatch;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              if (!this.closed) {\n                _context10.next = 2;\n                break;\n              }\n              return _context10.abrupt(\"return\", null);\n            case 2:\n              if (this._footer) {\n                _context10.next = 5;\n                break;\n              }\n              _context10.next = 5;\n              return this.open();\n            case 5:\n              block = this._footer && this._footer.getRecordBatch(index);\n              _context10.t0 = block;\n              if (!_context10.t0) {\n                _context10.next = 11;\n                break;\n              }\n              _context10.next = 10;\n              return this._handle.seek(block.offset);\n            case 10:\n              _context10.t0 = _context10.sent;\n            case 11:\n              if (!_context10.t0) {\n                _context10.next = 22;\n                break;\n              }\n              _context10.next = 14;\n              return this._reader.readMessage(MessageHeader.RecordBatch);\n            case 14:\n              message = _context10.sent;\n              if (!(message && message.isRecordBatch())) {\n                _context10.next = 22;\n                break;\n              }\n              header = message.header();\n              _context10.next = 19;\n              return this._reader.readMessageBody(message.bodyLength);\n            case 19:\n              buffer = _context10.sent;\n              recordBatch = this._loadRecordBatch(header, buffer);\n              return _context10.abrupt(\"return\", recordBatch);\n            case 22:\n              return _context10.abrupt(\"return\", null);\n            case 23:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n      function readRecordBatch(_x7) {\n        return _readRecordBatch.apply(this, arguments);\n      }\n      return readRecordBatch;\n    }()\n  }, {\n    key: \"_readDictionaryBatch\",\n    value: function () {\n      var _readDictionaryBatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(index) {\n        var block, message, header, buffer, vector;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              block = this._footer && this._footer.getDictionaryBatch(index);\n              _context11.t0 = block;\n              if (!_context11.t0) {\n                _context11.next = 6;\n                break;\n              }\n              _context11.next = 5;\n              return this._handle.seek(block.offset);\n            case 5:\n              _context11.t0 = _context11.sent;\n            case 6:\n              if (!_context11.t0) {\n                _context11.next = 17;\n                break;\n              }\n              _context11.next = 9;\n              return this._reader.readMessage(MessageHeader.DictionaryBatch);\n            case 9:\n              message = _context11.sent;\n              if (!(message && message.isDictionaryBatch())) {\n                _context11.next = 17;\n                break;\n              }\n              header = message.header();\n              _context11.next = 14;\n              return this._reader.readMessageBody(message.bodyLength);\n            case 14:\n              buffer = _context11.sent;\n              vector = this._loadDictionaryBatch(header, buffer);\n              this.dictionaries.set(header.id, vector);\n            case 17:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function _readDictionaryBatch(_x8) {\n        return _readDictionaryBatch2.apply(this, arguments);\n      }\n      return _readDictionaryBatch;\n    }()\n  }, {\n    key: \"_readFooter\",\n    value: function () {\n      var _readFooter2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var _handle, offset, length, buffer;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _handle = this._handle;\n              _context12.t0 = _handle._pending;\n              if (!_context12.t0) {\n                _context12.next = 5;\n                break;\n              }\n              _context12.next = 5;\n              return _handle._pending;\n            case 5:\n              offset = _handle.size - magicAndPadding;\n              _context12.next = 8;\n              return _handle.readInt32(offset);\n            case 8:\n              length = _context12.sent;\n              _context12.next = 11;\n              return _handle.readAt(offset - length, length);\n            case 11:\n              buffer = _context12.sent;\n              return _context12.abrupt(\"return\", Footer.decode(buffer));\n            case 13:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function _readFooter() {\n        return _readFooter2.apply(this, arguments);\n      }\n      return _readFooter;\n    }()\n  }, {\n    key: \"_readNextMessageAndValidate\",\n    value: function () {\n      var _readNextMessageAndValidate3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(type) {\n        var block;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              if (this._footer) {\n                _context13.next = 3;\n                break;\n              }\n              _context13.next = 3;\n              return this.open();\n            case 3:\n              if (!(this._footer && this._recordBatchIndex < this.numRecordBatches)) {\n                _context13.next = 14;\n                break;\n              }\n              block = this._footer.getRecordBatch(this._recordBatchIndex);\n              _context13.t0 = block;\n              if (!_context13.t0) {\n                _context13.next = 10;\n                break;\n              }\n              _context13.next = 9;\n              return this._handle.seek(block.offset);\n            case 9:\n              _context13.t0 = _context13.sent;\n            case 10:\n              if (!_context13.t0) {\n                _context13.next = 14;\n                break;\n              }\n              _context13.next = 13;\n              return this._reader.readMessage(type);\n            case 13:\n              return _context13.abrupt(\"return\", _context13.sent);\n            case 14:\n              return _context13.abrupt(\"return\", null);\n            case 15:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function _readNextMessageAndValidate(_x9) {\n        return _readNextMessageAndValidate3.apply(this, arguments);\n      }\n      return _readNextMessageAndValidate;\n    }()\n  }]);\n  return AsyncRecordBatchFileReaderImpl;\n}(AsyncRecordBatchStreamReaderImpl);\n/** @ignore */\nvar RecordBatchJSONReaderImpl = /*#__PURE__*/function (_RecordBatchStreamRea3) {\n  _inherits(RecordBatchJSONReaderImpl, _RecordBatchStreamRea3);\n  var _super10 = _createSuper(RecordBatchJSONReaderImpl);\n  function RecordBatchJSONReaderImpl(source, dictionaries) {\n    _classCallCheck(this, RecordBatchJSONReaderImpl);\n    return _super10.call(this, source, dictionaries);\n  }\n  _createClass(RecordBatchJSONReaderImpl, [{\n    key: \"_loadVectors\",\n    value: function _loadVectors(header, body, types) {\n      return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n  }]);\n  return RecordBatchJSONReaderImpl;\n}(RecordBatchStreamReaderImpl); //\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n/** @ignore */\nfunction shouldAutoDestroy(self, options) {\n  return options && typeof options['autoDestroy'] === 'boolean' ? options['autoDestroy'] : self['autoDestroy'];\n}\n/** @ignore */\nfunction readAllSync(source) {\n  var reader;\n  return _regeneratorRuntime().wrap(function readAllSync$(_context14) {\n    while (1) switch (_context14.prev = _context14.next) {\n      case 0:\n        reader = RecordBatchReader.from(source);\n        _context14.prev = 1;\n        if (reader.open({\n          autoDestroy: false\n        }).closed) {\n          _context14.next = 6;\n          break;\n        }\n      case 3:\n        _context14.next = 5;\n        return reader;\n      case 5:\n        if (!reader.reset().open().closed) {\n          _context14.next = 3;\n          break;\n        }\n      case 6:\n        _context14.prev = 6;\n        reader.cancel();\n        return _context14.finish(6);\n      case 9:\n      case \"end\":\n        return _context14.stop();\n    }\n  }, _marked, null, [[1,, 6, 9]]);\n}\n/** @ignore */\nfunction readAllAsync(_x) {\n  return _readAllAsync.apply(this, arguments);\n}\n/** @ignore */\nfunction _readAllAsync() {\n  _readAllAsync = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(source) {\n    var reader;\n    return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n      while (1) switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return _awaitAsyncGenerator(RecordBatchReader.from(source));\n        case 2:\n          reader = _context15.sent;\n          _context15.prev = 3;\n          _context15.next = 6;\n          return _awaitAsyncGenerator(reader.open({\n            autoDestroy: false\n          }));\n        case 6:\n          if (_context15.sent.closed) {\n            _context15.next = 12;\n            break;\n          }\n        case 7:\n          _context15.next = 9;\n          return reader;\n        case 9:\n          _context15.next = 11;\n          return _awaitAsyncGenerator(reader.reset().open());\n        case 11:\n          if (!_context15.sent.closed) {\n            _context15.next = 7;\n            break;\n          }\n        case 12:\n          _context15.prev = 12;\n          _context15.next = 15;\n          return _awaitAsyncGenerator(reader.cancel());\n        case 15:\n          return _context15.finish(12);\n        case 16:\n        case \"end\":\n          return _context15.stop();\n      }\n    }, _callee14, null, [[3,, 12, 16]]);\n  }));\n  return _readAllAsync.apply(this, arguments);\n}\nfunction fromArrowJSON(source) {\n  return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl(source));\n}\n/** @ignore */\nfunction fromByteStream(source) {\n  var bytes = source.peek(magicLength + 7 & ~7);\n  return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes) ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(source)) : new RecordBatchFileReader(new RecordBatchFileReaderImpl(source.read())) : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n    return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee15);\n  })()));\n}\n/** @ignore */\nfunction fromAsyncByteStream(_x10) {\n  return _fromAsyncByteStream.apply(this, arguments);\n}\n/** @ignore */\nfunction _fromAsyncByteStream() {\n  _fromAsyncByteStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(source) {\n    var bytes;\n    return _regeneratorRuntime().wrap(function _callee17$(_context18) {\n      while (1) switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return source.peek(magicLength + 7 & ~7);\n        case 2:\n          bytes = _context18.sent;\n          if (!(bytes && bytes.byteLength >= 4)) {\n            _context18.next = 18;\n            break;\n          }\n          if (checkForMagicArrowString(bytes)) {\n            _context18.next = 8;\n            break;\n          }\n          _context18.t1 = new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(source));\n          _context18.next = 15;\n          break;\n        case 8:\n          _context18.t2 = RecordBatchFileReader;\n          _context18.t3 = RecordBatchFileReaderImpl;\n          _context18.next = 12;\n          return source.read();\n        case 12:\n          _context18.t4 = _context18.sent;\n          _context18.t5 = new _context18.t3(_context18.t4);\n          _context18.t1 = new _context18.t2(_context18.t5);\n        case 15:\n          _context18.t0 = _context18.t1;\n          _context18.next = 19;\n          break;\n        case 18:\n          _context18.t0 = new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n            return _regeneratorRuntime().wrap(function _callee16$(_context17) {\n              while (1) switch (_context17.prev = _context17.next) {\n                case 0:\n                case \"end\":\n                  return _context17.stop();\n              }\n            }, _callee16);\n          }))()));\n        case 19:\n          return _context18.abrupt(\"return\", _context18.t0);\n        case 20:\n        case \"end\":\n          return _context18.stop();\n      }\n    }, _callee17);\n  }));\n  return _fromAsyncByteStream.apply(this, arguments);\n}\nfunction fromFileHandle(_x11) {\n  return _fromFileHandle.apply(this, arguments);\n}\nfunction _fromFileHandle() {\n  _fromFileHandle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(source) {\n    var _yield$source$stat, size, file;\n    return _regeneratorRuntime().wrap(function _callee18$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return source.stat();\n        case 2:\n          _yield$source$stat = _context19.sent;\n          size = _yield$source$stat.size;\n          file = new AsyncRandomAccessFile(source, size);\n          if (!(size >= magicX2AndPadding)) {\n            _context19.next = 12;\n            break;\n          }\n          _context19.t0 = checkForMagicArrowString;\n          _context19.next = 9;\n          return file.readAt(0, magicLength + 7 & ~7);\n        case 9:\n          _context19.t1 = _context19.sent;\n          if (!(0, _context19.t0)(_context19.t1)) {\n            _context19.next = 12;\n            break;\n          }\n          return _context19.abrupt(\"return\", new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl(file)));\n        case 12:\n          return _context19.abrupt(\"return\", new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(file)));\n        case 13:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee18);\n  }));\n  return _fromFileHandle.apply(this, arguments);\n}","map":{"version":3,"sources":["ipc/reader.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            return (dictionary && isDelta ? dictionary.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n        }\n        return dictionary;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n"]},"metadata":{},"sourceType":"module"}