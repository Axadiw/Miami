{"ast":null,"code":"import _asyncToGenerator from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _construct from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _slicedToArray from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Column } from './column';\nimport { Schema } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { RecordBatchReader } from './ipc/reader';\nimport { Struct } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Chunked, StructVector } from './vector/index';\nexport var Table = /*#__PURE__*/function (_Chunked) {\n  _inherits(Table, _Chunked);\n  var _super = _createSuper(Table);\n  function Table() {\n    var _this;\n    _classCallCheck(this, Table);\n    var schema = null;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args[0] instanceof Schema) {\n      schema = args.shift();\n    }\n    var chunks = selectArgs(RecordBatch, args);\n    if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n      throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n    }\n    chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n    _this = _super.call(this, new Struct(schema.fields), chunks);\n    _this._schema = schema;\n    _this._chunks = chunks;\n    return _this;\n  }\n  /** @nocollapse */\n  _createClass(Table, [{\n    key: \"schema\",\n    get: function get() {\n      return this._schema;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    }\n  }, {\n    key: \"chunks\",\n    get: function get() {\n      return this._chunks;\n    }\n  }, {\n    key: \"numCols\",\n    get: function get() {\n      return this._numChildren;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._chunks;\n      return new Table(this._schema, chunks);\n    }\n  }, {\n    key: \"getColumn\",\n    value: function getColumn(name) {\n      return this.getColumnAt(this.getColumnIndex(name));\n    }\n  }, {\n    key: \"getColumnAt\",\n    value: function getColumnAt(index) {\n      return this.getChildAt(index);\n    }\n  }, {\n    key: \"getColumnIndex\",\n    value: function getColumnIndex(name) {\n      return this._schema.fields.findIndex(function (f) {\n        return f.name === name;\n      });\n    }\n  }, {\n    key: \"getChildAt\",\n    value: function getChildAt(index) {\n      if (index < 0 || index >= this.numChildren) {\n        return null;\n      }\n      var field, child;\n      var fields = this._schema.fields;\n      var columns = this._children || (this._children = []);\n      if (child = columns[index]) {\n        return child;\n      }\n      if (field = fields[index]) {\n        var chunks = this._chunks.map(function (chunk) {\n          return chunk.getChildAt(index);\n        }).filter(function (vec) {\n          return vec != null;\n        });\n        if (chunks.length > 0) {\n          return columns[index] = new Column(field, chunks);\n        }\n      }\n      return null;\n    }\n    // @ts-ignore\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'binary';\n      var stream = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var Writer = !stream ? RecordBatchFileWriter : RecordBatchStreamWriter;\n      return Writer.writeAll(this).toUint8Array(true);\n    }\n  }, {\n    key: \"count\",\n    value: function count() {\n      return this._length;\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      var nameToIndex = this._schema.fields.reduce(function (m, f, i) {\n        return m.set(f.name, i);\n      }, new Map());\n      for (var _len2 = arguments.length, columnNames = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        columnNames[_key2] = arguments[_key2];\n      }\n      return this.selectAt.apply(this, _toConsumableArray(columnNames.map(function (columnName) {\n        return nameToIndex.get(columnName);\n      }).filter(function (x) {\n        return x > -1;\n      })));\n    }\n  }, {\n    key: \"selectAt\",\n    value: function selectAt() {\n      var _this$_schema;\n      for (var _len3 = arguments.length, columnIndices = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        columnIndices[_key3] = arguments[_key3];\n      }\n      var schema = (_this$_schema = this._schema).selectAt.apply(_this$_schema, columnIndices);\n      return new Table(schema, this._chunks.map(function (_ref) {\n        var length = _ref.length,\n          childData = _ref.data.childData;\n        return new RecordBatch(schema, length, columnIndices.map(function (i) {\n          return childData[i];\n        }).filter(Boolean));\n      }));\n    }\n  }, {\n    key: \"assign\",\n    value: function assign(other) {\n      var _this2 = this;\n      var fields = this._schema.fields;\n      var _other$schema$fields$ = other.schema.fields.reduce(function (memo, f2, newIdx) {\n          var _memo = _slicedToArray(memo, 2),\n            indices = _memo[0],\n            oldToNew = _memo[1];\n          var i = fields.findIndex(function (f) {\n            return f.name === f2.name;\n          });\n          ~i ? oldToNew[i] = newIdx : indices.push(newIdx);\n          return memo;\n        }, [[], []]),\n        _other$schema$fields$2 = _slicedToArray(_other$schema$fields$, 2),\n        indices = _other$schema$fields$2[0],\n        oldToNew = _other$schema$fields$2[1];\n      var schema = this._schema.assign(other.schema);\n      var columns = [].concat(_toConsumableArray(fields.map(function (_f, i, _fs) {\n        var j = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : oldToNew[i];\n        return j === undefined ? _this2.getColumnAt(i) : other.getColumnAt(j);\n      })), _toConsumableArray(indices.map(function (i) {\n        return other.getColumnAt(i);\n      }))).filter(Boolean);\n      return _construct(Table, _toConsumableArray(distributeVectorsIntoRecordBatches(schema, columns)));\n    }\n  }], [{\n    key: \"empty\",\n    value: function empty() {\n      var schema = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Schema([]);\n      return new Table(schema, []);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"from\",\n    value: function from(input) {\n      if (!input) {\n        return Table.empty();\n      }\n      if (typeof input === 'object') {\n        var table = isIterable(input['values']) ? tableFromIterable(input) : isAsyncIterable(input['values']) ? tableFromAsyncIterable(input) : null;\n        if (table !== null) {\n          return table;\n        }\n      }\n      var reader = RecordBatchReader.from(input);\n      if (isPromise(reader)) {\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = Table;\n                _context.next = 3;\n                return reader;\n              case 3:\n                _context.t1 = _context.sent;\n                _context.next = 6;\n                return _context.t0.from.call(_context.t0, _context.t1);\n              case 6:\n                return _context.abrupt(\"return\", _context.sent);\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        }))();\n      }\n      if (reader.isSync() && (reader = reader.open())) {\n        return !reader.schema ? Table.empty() : new Table(reader.schema, _toConsumableArray(reader));\n      }\n      return function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(opening) {\n          var reader, schema, batches, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, batch;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return opening;\n              case 2:\n                reader = _context2.sent;\n                schema = reader.schema;\n                batches = [];\n                if (!schema) {\n                  _context2.next = 35;\n                  break;\n                }\n                _iteratorAbruptCompletion = false;\n                _didIteratorError = false;\n                _context2.prev = 8;\n                _iterator = _asyncIterator(reader);\n              case 10:\n                _context2.next = 12;\n                return _iterator.next();\n              case 12:\n                if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n                  _context2.next = 18;\n                  break;\n                }\n                batch = _step.value;\n                batches.push(batch);\n              case 15:\n                _iteratorAbruptCompletion = false;\n                _context2.next = 10;\n                break;\n              case 18:\n                _context2.next = 24;\n                break;\n              case 20:\n                _context2.prev = 20;\n                _context2.t0 = _context2[\"catch\"](8);\n                _didIteratorError = true;\n                _iteratorError = _context2.t0;\n              case 24:\n                _context2.prev = 24;\n                _context2.prev = 25;\n                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                  _context2.next = 29;\n                  break;\n                }\n                _context2.next = 29;\n                return _iterator.return();\n              case 29:\n                _context2.prev = 29;\n                if (!_didIteratorError) {\n                  _context2.next = 32;\n                  break;\n                }\n                throw _iteratorError;\n              case 32:\n                return _context2.finish(29);\n              case 33:\n                return _context2.finish(24);\n              case 34:\n                return _context2.abrupt(\"return\", new Table(schema, batches));\n              case 35:\n                return _context2.abrupt(\"return\", Table.empty());\n              case 36:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, null, [[8, 20, 24, 34], [25,, 29, 33]]);\n        }));\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }()(reader.open());\n    }\n    /** @nocollapse */\n  }, {\n    key: \"fromAsync\",\n    value: function () {\n      var _fromAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(source) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return Table.from(source);\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      function fromAsync(_x2) {\n        return _fromAsync.apply(this, arguments);\n      }\n      return fromAsync;\n    }() /** @nocollapse */\n  }, {\n    key: \"fromStruct\",\n    value: function fromStruct(vector) {\n      return Table.new(vector.data.childData, vector.type.children);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"new\",\n    value: function _new() {\n      for (var _len4 = arguments.length, cols = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        cols[_key4] = arguments[_key4];\n      }\n      return _construct(Table, _toConsumableArray(distributeColumnsIntoRecordBatches(selectColumnArgs(cols))));\n    }\n  }]);\n  return Table;\n}(Chunked);\nfunction tableFromIterable(input) {\n  var type = input.type;\n  if (type instanceof Struct) {\n    return Table.fromStruct(StructVector.from(input));\n  }\n  return null;\n}\nfunction tableFromAsyncIterable(input) {\n  var type = input.type;\n  if (type instanceof Struct) {\n    return StructVector.from(input).then(function (vector) {\n      return Table.fromStruct(vector);\n    });\n  }\n  return null;\n}","map":{"version":3,"sources":["table.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { DataType, RowLike, Struct } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n\nexport interface Table<T extends { [key: string]: DataType } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    scanReverse(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType } = {}>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\n\n    public static from(): Table<{}>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\n\n        if (!input) { return Table.empty(); }\n\n        if (typeof input === 'object') {\n            let table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\n                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\n                                                    : null;\n            if (table !== null) { return table; }\n        }\n\n        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\n        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n    }\n\n    /**\n     * @summary Create a new Table from a collection of Columns or Vectors,\n     * with an optional list of names or Fields.\n     *\n     *\n     * `Table.new` accepts an Object of\n     * Columns or Vectors, where the keys will be used as the field names\n     * for the Schema:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new({ i32: i32s, f32: f32s });\n     * assert(table.schema.fields[0].name === 'i32');\n     * ```\n     *\n     * It also accepts a a list of Vectors with an optional list of names or\n     * Fields for the resulting Schema. If the list is omitted or a name is\n     * missing, the numeric index of each Vector will be used as the name:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new([i32s, f32s], ['i32']);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === '1');\n     * ```\n     *\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n     * from the Columns:\n     * ```ts\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n     * const table = Table.new(i32s, f32s);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === 'f32');\n     * ```\n     *\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n     * extend the lengths of the shorter Columns, allocating additional bytes\n     * to represent the additional null slots. The memory required to allocate\n     * these additional bitmaps can be computed as:\n     * ```ts\n     * let additionalBytes = 0;\n     * for (let vec in shorter_vectors) {\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n     * }\n     * ```\n     *\n     * For example, an additional null bitmap for one million null values would require\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n     */\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n    /** @nocollapse */\n    public static new(...cols: any[]) {\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema<T> = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n\n        super(new Struct(schema.fields), chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema<T>;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n    }\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let field: Field<R>, child: Column<R>;\n        const fields = (this._schema as Schema<any>).fields;\n        const columns = this._children || (this._children = []) as Column[];\n        if (child = columns[index]) { return child as Column<R>; }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const Writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return Writer.writeAll(this).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt<K>(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\n\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\n            ...indices.map((i) => other.getColumnAt(i)!)\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\n\n        return new Table<T & R>(...distributeVectorsIntoRecordBatches<any>(schema, columns));\n    }\n}\n\nfunction tableFromIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptions<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return Table.fromStruct(StructVector.from(input as VectorBuilderOptions<Struct<T>, TNull>));\n    }\n    return null;\n}\n\nfunction tableFromAsyncIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return StructVector.from(input as VectorBuilderOptionsAsync<Struct<T>, TNull>).then((vector) => Table.fromStruct(vector));\n    }\n    return null;\n}\n"]},"metadata":{},"sourceType":"module"}