{"ast":null,"code":"import _createClass from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { uint16ToFloat64 } from '../util/math';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\n/** @ignore */\nexport var GetVisitor = /*#__PURE__*/function (_Visitor) {\n  _inherits(GetVisitor, _Visitor);\n  var _super = _createSuper(GetVisitor);\n  function GetVisitor() {\n    _classCallCheck(this, GetVisitor);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(GetVisitor);\n}(Visitor);\n/** @ignore */\nvar epochDaysToMs = function epochDaysToMs(data, index) {\n  return 86400000 * data[index];\n};\n/** @ignore */\nvar epochMillisecondsLongToMs = function epochMillisecondsLongToMs(data, index) {\n  return 4294967296 * data[index + 1] + (data[index] >>> 0);\n};\n/** @ignore */\nvar epochMicrosecondsLongToMs = function epochMicrosecondsLongToMs(data, index) {\n  return 4294967296 * (data[index + 1] / 1000) + (data[index] >>> 0) / 1000;\n};\n/** @ignore */\nvar epochNanosecondsLongToMs = function epochNanosecondsLongToMs(data, index) {\n  return 4294967296 * (data[index + 1] / 1000000) + (data[index] >>> 0) / 1000000;\n};\n/** @ignore */\nvar epochMillisecondsToDate = function epochMillisecondsToDate(epochMs) {\n  return new Date(epochMs);\n};\n/** @ignore */\nvar epochDaysToDate = function epochDaysToDate(data, index) {\n  return epochMillisecondsToDate(epochDaysToMs(data, index));\n};\n/** @ignore */\nvar epochMillisecondsLongToDate = function epochMillisecondsLongToDate(data, index) {\n  return epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n};\n/** @ignore */\nvar getNull = function getNull(_vector, _index) {\n  return null;\n};\n/** @ignore */\nvar getVariableWidthBytes = function getVariableWidthBytes(values, valueOffsets, index) {\n  var x = valueOffsets[index],\n    y = valueOffsets[index + 1];\n  return x != null && y != null ? values.subarray(x, y) : null;\n};\n/** @ignore */\nvar getBool = function getBool(_ref, index) {\n  var offset = _ref.offset,\n    values = _ref.values;\n  var idx = offset + index;\n  var byte = values[idx >> 3];\n  return (byte & 1 << idx % 8) !== 0;\n};\n/** @ignore */\nvar getDateDay = function getDateDay(_ref2, index) {\n  var values = _ref2.values;\n  return epochDaysToDate(values, index);\n};\n/** @ignore */\nvar getDateMillisecond = function getDateMillisecond(_ref3, index) {\n  var values = _ref3.values;\n  return epochMillisecondsLongToDate(values, index * 2);\n};\n/** @ignore */\nvar getNumeric = function getNumeric(_ref4, index) {\n  var stride = _ref4.stride,\n    values = _ref4.values;\n  return values[stride * index];\n};\n/** @ignore */\nvar getFloat16 = function getFloat16(_ref5, index) {\n  var stride = _ref5.stride,\n    values = _ref5.values;\n  return uint16ToFloat64(values[stride * index]);\n};\n/** @ignore */\nvar getBigInts = function getBigInts(_ref6, index) {\n  var stride = _ref6.stride,\n    values = _ref6.values,\n    type = _ref6.type;\n  return BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n};\n/** @ignore */\nvar getFixedSizeBinary = function getFixedSizeBinary(_ref7, index) {\n  var stride = _ref7.stride,\n    values = _ref7.values;\n  return values.subarray(stride * index, stride * (index + 1));\n};\n/** @ignore */\nvar getBinary = function getBinary(_ref8, index) {\n  var values = _ref8.values,\n    valueOffsets = _ref8.valueOffsets;\n  return getVariableWidthBytes(values, valueOffsets, index);\n};\n/** @ignore */\nvar getUtf8 = function getUtf8(_ref9, index) {\n  var values = _ref9.values,\n    valueOffsets = _ref9.valueOffsets;\n  var bytes = getVariableWidthBytes(values, valueOffsets, index);\n  return bytes !== null ? decodeUtf8(bytes) : null;\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getInt = function getInt(vector, index) {\n  return vector.type.bitWidth < 64 ? getNumeric(vector, index) : getBigInts(vector, index);\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getFloat = function getFloat(vector, index) {\n  return vector.type.precision !== Precision.HALF ? getNumeric(vector, index) : getFloat16(vector, index);\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getDate = function getDate(vector, index) {\n  return vector.type.unit === DateUnit.DAY ? getDateDay(vector, index) : getDateMillisecond(vector, index);\n};\n/** @ignore */\nvar getTimestampSecond = function getTimestampSecond(_ref10, index) {\n  var values = _ref10.values;\n  return 1000 * epochMillisecondsLongToMs(values, index * 2);\n};\n/** @ignore */\nvar getTimestampMillisecond = function getTimestampMillisecond(_ref11, index) {\n  var values = _ref11.values;\n  return epochMillisecondsLongToMs(values, index * 2);\n};\n/** @ignore */\nvar getTimestampMicrosecond = function getTimestampMicrosecond(_ref12, index) {\n  var values = _ref12.values;\n  return epochMicrosecondsLongToMs(values, index * 2);\n};\n/** @ignore */\nvar getTimestampNanosecond = function getTimestampNanosecond(_ref13, index) {\n  var values = _ref13.values;\n  return epochNanosecondsLongToMs(values, index * 2);\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getTimestamp = function getTimestamp(vector, index) {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return getTimestampSecond(vector, index);\n    case TimeUnit.MILLISECOND:\n      return getTimestampMillisecond(vector, index);\n    case TimeUnit.MICROSECOND:\n      return getTimestampMicrosecond(vector, index);\n    case TimeUnit.NANOSECOND:\n      return getTimestampNanosecond(vector, index);\n  }\n};\n/** @ignore */\nvar getTimeSecond = function getTimeSecond(_ref14, index) {\n  var values = _ref14.values,\n    stride = _ref14.stride;\n  return values[stride * index];\n};\n/** @ignore */\nvar getTimeMillisecond = function getTimeMillisecond(_ref15, index) {\n  var values = _ref15.values,\n    stride = _ref15.stride;\n  return values[stride * index];\n};\n/** @ignore */\nvar getTimeMicrosecond = function getTimeMicrosecond(_ref16, index) {\n  var values = _ref16.values;\n  return BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n};\n/** @ignore */\nvar getTimeNanosecond = function getTimeNanosecond(_ref17, index) {\n  var values = _ref17.values;\n  return BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getTime = function getTime(vector, index) {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return getTimeSecond(vector, index);\n    case TimeUnit.MILLISECOND:\n      return getTimeMillisecond(vector, index);\n    case TimeUnit.MICROSECOND:\n      return getTimeMicrosecond(vector, index);\n    case TimeUnit.NANOSECOND:\n      return getTimeNanosecond(vector, index);\n  }\n};\n/** @ignore */\nvar getDecimal = function getDecimal(_ref18, index) {\n  var values = _ref18.values;\n  return BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n};\n/** @ignore */\nvar getList = function getList(vector, index) {\n  var child = vector.getChildAt(0),\n    valueOffsets = vector.valueOffsets,\n    stride = vector.stride;\n  return child.slice(valueOffsets[index * stride], valueOffsets[index * stride + 1]);\n};\n/** @ignore */\nvar getMap = function getMap(vector, index) {\n  return vector.bind(index);\n};\n/** @ignore */\nvar getStruct = function getStruct(vector, index) {\n  return vector.bind(index);\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getUnion = function getUnion(vector, index) {\n  return vector.type.mode === UnionMode.Dense ? getDenseUnion(vector, index) : getSparseUnion(vector, index);\n};\n/** @ignore */\nvar getDenseUnion = function getDenseUnion(vector, index) {\n  var childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  var child = vector.getChildAt(childIndex);\n  return child ? child.get(vector.valueOffsets[index]) : null;\n};\n/** @ignore */\nvar getSparseUnion = function getSparseUnion(vector, index) {\n  var childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  var child = vector.getChildAt(childIndex);\n  return child ? child.get(index) : null;\n};\n/** @ignore */\nvar getDictionary = function getDictionary(vector, index) {\n  return vector.getValue(vector.getKey(index));\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getInterval = function getInterval(vector, index) {\n  return vector.type.unit === IntervalUnit.DAY_TIME ? getIntervalDayTime(vector, index) : getIntervalYearMonth(vector, index);\n};\n/** @ignore */\nvar getIntervalDayTime = function getIntervalDayTime(_ref19, index) {\n  var values = _ref19.values;\n  return values.subarray(2 * index, 2 * (index + 1));\n};\n/** @ignore */\nvar getIntervalYearMonth = function getIntervalYearMonth(_ref20, index) {\n  var values = _ref20.values;\n  var interval = values[index];\n  var int32s = new Int32Array(2);\n  int32s[0] = interval / 12 | 0; /* years */\n  int32s[1] = interval % 12 | 0; /* months */\n  return int32s;\n};\n/** @ignore */\nvar getFixedSizeList = function getFixedSizeList(vector, index) {\n  var child = vector.getChildAt(0),\n    stride = vector.stride;\n  return child.slice(index * stride, (index + 1) * stride);\n};\nGetVisitor.prototype.visitNull = getNull;\nGetVisitor.prototype.visitBool = getBool;\nGetVisitor.prototype.visitInt = getInt;\nGetVisitor.prototype.visitInt8 = getNumeric;\nGetVisitor.prototype.visitInt16 = getNumeric;\nGetVisitor.prototype.visitInt32 = getNumeric;\nGetVisitor.prototype.visitInt64 = getBigInts;\nGetVisitor.prototype.visitUint8 = getNumeric;\nGetVisitor.prototype.visitUint16 = getNumeric;\nGetVisitor.prototype.visitUint32 = getNumeric;\nGetVisitor.prototype.visitUint64 = getBigInts;\nGetVisitor.prototype.visitFloat = getFloat;\nGetVisitor.prototype.visitFloat16 = getFloat16;\nGetVisitor.prototype.visitFloat32 = getNumeric;\nGetVisitor.prototype.visitFloat64 = getNumeric;\nGetVisitor.prototype.visitUtf8 = getUtf8;\nGetVisitor.prototype.visitBinary = getBinary;\nGetVisitor.prototype.visitFixedSizeBinary = getFixedSizeBinary;\nGetVisitor.prototype.visitDate = getDate;\nGetVisitor.prototype.visitDateDay = getDateDay;\nGetVisitor.prototype.visitDateMillisecond = getDateMillisecond;\nGetVisitor.prototype.visitTimestamp = getTimestamp;\nGetVisitor.prototype.visitTimestampSecond = getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond = getTimestampNanosecond;\nGetVisitor.prototype.visitTime = getTime;\nGetVisitor.prototype.visitTimeSecond = getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond = getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond = getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond = getTimeNanosecond;\nGetVisitor.prototype.visitDecimal = getDecimal;\nGetVisitor.prototype.visitList = getList;\nGetVisitor.prototype.visitStruct = getStruct;\nGetVisitor.prototype.visitUnion = getUnion;\nGetVisitor.prototype.visitDenseUnion = getDenseUnion;\nGetVisitor.prototype.visitSparseUnion = getSparseUnion;\nGetVisitor.prototype.visitDictionary = getDictionary;\nGetVisitor.prototype.visitInterval = getInterval;\nGetVisitor.prototype.visitIntervalDayTime = getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth = getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList = getFixedSizeList;\nGetVisitor.prototype.visitMap = getMap;\n/** @ignore */\nexport var instance = new GetVisitor();","map":{"version":3,"sources":["visitor/get.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { uint16ToFloat64 } from '../util/math';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getBigInts(vector as VectorType<Numeric2X>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getFloat16(vector as VectorType<Float16>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as VectorType<DateDay>, index)\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getStruct;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =                  getMap;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n"]},"metadata":{},"sourceType":"module"}