{"ast":null,"code":"import _toConsumableArray from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { Chunked } from './vector/chunked';\nexport var Column = /*#__PURE__*/function (_Chunked) {\n  _inherits(Column, _Chunked);\n  var _super = _createSuper(Column);\n  function Column(field) {\n    var _this;\n    var vectors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var offsets = arguments.length > 2 ? arguments[2] : undefined;\n    _classCallCheck(this, Column);\n    vectors = Chunked.flatten.apply(Chunked, _toConsumableArray(vectors));\n    _this = _super.call(this, field.type, vectors, offsets);\n    _this._field = field;\n    if (vectors.length === 1 && !(_assertThisInitialized(_this) instanceof SingleChunkColumn)) {\n      return _possibleConstructorReturn(_this, new SingleChunkColumn(field, vectors[0], _this._chunkOffsets));\n    }\n    return _this;\n  }\n  /** @nocollapse */\n  _createClass(Column, [{\n    key: \"field\",\n    get: function get() {\n      return this._field;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._field.name;\n    }\n  }, {\n    key: \"nullable\",\n    get: function get() {\n      return this._field.nullable;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._field.metadata;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._chunks;\n      return new Column(this._field, chunks);\n    }\n  }, {\n    key: \"getChildAt\",\n    value: function getChildAt(index) {\n      if (index < 0 || index >= this.numChildren) {\n        return null;\n      }\n      var columns = this._children || (this._children = []);\n      var column, field, chunks;\n      if (column = columns[index]) {\n        return column;\n      }\n      if (field = (this.type.children || [])[index]) {\n        chunks = this._chunks.map(function (vector) {\n          return vector.getChildAt(index);\n        }).filter(function (vec) {\n          return vec != null;\n        });\n        if (chunks.length > 0) {\n          return columns[index] = new Column(field, chunks);\n        }\n      }\n      return null;\n    }\n  }], [{\n    key: \"new\",\n    value: function _new(field, data) {\n      for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        rest[_key - 2] = arguments[_key];\n      }\n      var chunks = Chunked.flatten(Array.isArray(data) ? [].concat(_toConsumableArray(data), rest) : data instanceof Vector ? [data].concat(rest) : [Vector.new.apply(Vector, [data].concat(rest))]);\n      if (typeof field === 'string') {\n        var type = chunks[0].data.type;\n        field = new Field(field, type, true);\n      } else if (!field.nullable && chunks.some(function (_ref) {\n        var nullCount = _ref.nullCount;\n        return nullCount > 0;\n      })) {\n        field = field.clone({\n          nullable: true\n        });\n      }\n      return new Column(field, chunks);\n    }\n  }]);\n  return Column;\n}(Chunked);\n/** @ignore */\nvar SingleChunkColumn = /*#__PURE__*/function (_Column) {\n  _inherits(SingleChunkColumn, _Column);\n  var _super2 = _createSuper(SingleChunkColumn);\n  function SingleChunkColumn(field, vector, offsets) {\n    var _this2;\n    _classCallCheck(this, SingleChunkColumn);\n    _this2 = _super2.call(this, field, [vector], offsets);\n    _this2._chunk = vector;\n    return _this2;\n  }\n  _createClass(SingleChunkColumn, [{\n    key: \"search\",\n    value: function search(index, then) {\n      return then ? then(this, 0, index) : [0, index];\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(index) {\n      return this._chunk.isValid(index);\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this._chunk.get(index);\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      this._chunk.set(index, value);\n    }\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(element, offset) {\n      return this._chunk.indexOf(element, offset);\n    }\n  }]);\n  return SingleChunkColumn;\n}(Column);","map":{"version":3,"sources":["column.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}