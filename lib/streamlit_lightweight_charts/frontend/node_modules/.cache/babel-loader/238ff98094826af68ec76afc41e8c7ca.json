{"ast":null,"code":"import _construct from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _slicedToArray from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { StructVector } from './vector/index';\nexport var RecordBatch = /*#__PURE__*/function (_StructVector) {\n  _inherits(RecordBatch, _StructVector);\n  var _super = _createSuper(RecordBatch);\n  function RecordBatch() {\n    var _this;\n    _classCallCheck(this, RecordBatch);\n    var data;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    var schema = args[0];\n    var children;\n    if (args[1] instanceof Data) {\n      data = args[1];\n      children = args[2];\n    } else {\n      var fields = schema.fields;\n      var length = args[1],\n        childData = args[2];\n      data = Data.Struct(new Struct(fields), 0, length, 0, null, childData);\n    }\n    _this = _super.call(this, data, children);\n    _this._schema = schema;\n    return _this;\n  }\n  /** @nocollapse */\n  _createClass(RecordBatch, [{\n    key: \"clone\",\n    value: function clone(data) {\n      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._children;\n      return new RecordBatch(this._schema, data, children);\n    }\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      for (var _len2 = arguments.length, others = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        others[_key2] = arguments[_key2];\n      }\n      var schema = this._schema,\n        chunks = Chunked.flatten.apply(Chunked, [this].concat(others));\n      return new Table(schema, chunks.map(function (_ref) {\n        var data = _ref.data;\n        return new RecordBatch(schema, data);\n      }));\n    }\n  }, {\n    key: \"schema\",\n    get: function get() {\n      return this._schema;\n    }\n  }, {\n    key: \"numCols\",\n    get: function get() {\n      return this._schema.fields.length;\n    }\n  }, {\n    key: \"dictionaries\",\n    get: function get() {\n      return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      var nameToIndex = this._schema.fields.reduce(function (m, f, i) {\n        return m.set(f.name, i);\n      }, new Map());\n      for (var _len3 = arguments.length, columnNames = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        columnNames[_key3] = arguments[_key3];\n      }\n      return this.selectAt.apply(this, _toConsumableArray(columnNames.map(function (columnName) {\n        return nameToIndex.get(columnName);\n      }).filter(function (x) {\n        return x > -1;\n      })));\n    }\n  }, {\n    key: \"selectAt\",\n    value: function selectAt() {\n      var _this$_schema,\n        _this2 = this;\n      for (var _len4 = arguments.length, columnIndices = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        columnIndices[_key4] = arguments[_key4];\n      }\n      var schema = (_this$_schema = this._schema).selectAt.apply(_this$_schema, columnIndices);\n      var childData = columnIndices.map(function (i) {\n        return _this2.data.childData[i];\n      }).filter(Boolean);\n      return new RecordBatch(schema, this.length, childData);\n    }\n  }], [{\n    key: \"from\",\n    value: function from(options) {\n      if (isIterable(options['values'])) {\n        return Table.from(options);\n      }\n      return Table.from(options);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"new\",\n    value: function _new() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      var _selectFieldArgs = selectFieldArgs(args),\n        _selectFieldArgs2 = _slicedToArray(_selectFieldArgs, 2),\n        fs = _selectFieldArgs2[0],\n        xs = _selectFieldArgs2[1];\n      var vs = xs.filter(function (x) {\n        return x instanceof Vector;\n      });\n      return _construct(RecordBatch, _toConsumableArray(ensureSameLengthData(new Schema(fs), vs.map(function (x) {\n        return x.data;\n      }))));\n    }\n  }]);\n  return RecordBatch;\n}(StructVector);\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport var _InternalEmptyPlaceholderRecordBatch = /*#__PURE__*/function (_RecordBatch) {\n  _inherits(_InternalEmptyPlaceholderRecordBatch, _RecordBatch);\n  var _super2 = _createSuper(_InternalEmptyPlaceholderRecordBatch);\n  function _InternalEmptyPlaceholderRecordBatch(schema) {\n    _classCallCheck(this, _InternalEmptyPlaceholderRecordBatch);\n    return _super2.call(this, schema, 0, schema.fields.map(function (f) {\n      return Data.new(f.type, 0, 0, 0);\n    }));\n  }\n  return _createClass(_InternalEmptyPlaceholderRecordBatch);\n}(RecordBatch);\n/** @ignore */\nvar DictionaryCollector = /*#__PURE__*/function (_Visitor) {\n  _inherits(DictionaryCollector, _Visitor);\n  var _super3 = _createSuper(DictionaryCollector);\n  function DictionaryCollector() {\n    var _this3;\n    _classCallCheck(this, DictionaryCollector);\n    _this3 = _super3.apply(this, arguments);\n    _this3.dictionaries = new Map();\n    return _this3;\n  }\n  _createClass(DictionaryCollector, [{\n    key: \"visit\",\n    value: function visit(data, type) {\n      var _this4 = this;\n      if (DataType.isDictionary(type)) {\n        return this.visitDictionary(data, type);\n      } else {\n        data.childData.forEach(function (child, i) {\n          return _this4.visit(child, type.children[i].type);\n        });\n      }\n      return this;\n    }\n  }, {\n    key: \"visitDictionary\",\n    value: function visitDictionary(data, type) {\n      var dictionary = data.dictionary;\n      if (dictionary && dictionary.length > 0) {\n        this.dictionaries.set(type.id, dictionary);\n      }\n      return this;\n    }\n  }], [{\n    key: \"collect\",\n    value: function collect(batch) {\n      return new DictionaryCollector().visit(batch.data, new Struct(batch.schema.fields)).dictionaries;\n    }\n  }]);\n  return DictionaryCollector;\n}(Visitor);","map":{"version":3,"sources":["recordbatch.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema, Field } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct, Dictionary } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull> | VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n        if (isIterable<(Struct<T>)['TValue'] | TNull>(options['values'])) {\n            return Table.from(options as VectorBuilderOptions<Struct<T>, TNull>);\n        }\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T>, TNull>);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n    protected _dictionaries?: Map<number, Vector>;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\n    }\n}\n\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n    public dictionaries = new Map<number, Vector>();\n    public static collect<T extends RecordBatch>(batch: T) {\n        return new DictionaryCollector().visit(\n            batch.data, new Struct(batch.schema.fields)\n        ).dictionaries;\n    }\n    public visit(data: Data, type: DataType) {\n        if (DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        } else {\n            data.childData.forEach((child, i) =>\n                this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    public visitDictionary(data: Data, type: Dictionary) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}