{"ast":null,"code":"import _asyncToGenerator from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _get from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _slicedToArray from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { ReadableInterop } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\nexport var RecordBatchWriter = /*#__PURE__*/function (_ReadableInterop, _Symbol$asyncIterator) {\n  _inherits(RecordBatchWriter, _ReadableInterop);\n  var _super = _createSuper(RecordBatchWriter);\n  function RecordBatchWriter(options) {\n    var _this;\n    _classCallCheck(this, RecordBatchWriter);\n    _this = _super.call(this);\n    _this._position = 0;\n    _this._started = false;\n    // @ts-ignore\n    _this._sink = new AsyncByteQueue();\n    _this._schema = null;\n    _this._dictionaryBlocks = [];\n    _this._recordBatchBlocks = [];\n    _this._dictionaryDeltaOffsets = new Map();\n    isObject(options) || (options = {\n      autoDestroy: true,\n      writeLegacyIpcFormat: false\n    });\n    _this._autoDestroy = typeof options.autoDestroy === 'boolean' ? options.autoDestroy : true;\n    _this._writeLegacyIpcFormat = typeof options.writeLegacyIpcFormat === 'boolean' ? options.writeLegacyIpcFormat : false;\n    return _this;\n  }\n  /** @nocollapse */\n  // @ts-ignore\n  _createClass(RecordBatchWriter, [{\n    key: \"toString\",\n    value: function toString() {\n      var sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this._sink.toString(sync);\n    }\n  }, {\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      var sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this._sink.toUint8Array(sync);\n    }\n  }, {\n    key: \"writeAll\",\n    value: function writeAll(input) {\n      var _this2 = this;\n      if (isPromise(input)) {\n        return input.then(function (x) {\n          return _this2.writeAll(x);\n        });\n      } else if (isAsyncIterable(input)) {\n        return writeAllAsync(this, input);\n      }\n      return _writeAll(this, input);\n    }\n  }, {\n    key: \"closed\",\n    get: function get() {\n      return this._sink.closed;\n    }\n  }, {\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      return this._sink[Symbol.asyncIterator]();\n    }\n  }, {\n    key: \"toDOMStream\",\n    value: function toDOMStream(options) {\n      return this._sink.toDOMStream(options);\n    }\n  }, {\n    key: \"toNodeStream\",\n    value: function toNodeStream(options) {\n      return this._sink.toNodeStream(options);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.reset()._sink.close();\n    }\n  }, {\n    key: \"abort\",\n    value: function abort(reason) {\n      return this.reset()._sink.abort(reason);\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n      return this;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var sink = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._sink;\n      var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (sink === this._sink || sink instanceof AsyncByteQueue) {\n        this._sink = sink;\n      } else {\n        this._sink = new AsyncByteQueue();\n        if (sink && isWritableDOMStream(sink)) {\n          this.toDOMStream({\n            type: 'bytes'\n          }).pipeTo(sink);\n        } else if (sink && isWritableNodeStream(sink)) {\n          this.toNodeStream({\n            objectMode: false\n          }).pipe(sink);\n        }\n      }\n      if (this._started && this._schema) {\n        this._writeFooter(this._schema);\n      }\n      this._started = false;\n      this._dictionaryBlocks = [];\n      this._recordBatchBlocks = [];\n      this._dictionaryDeltaOffsets = new Map();\n      if (!schema || !schema.compareTo(this._schema)) {\n        if (schema === null) {\n          this._position = 0;\n          this._schema = null;\n        } else {\n          this._started = true;\n          this._schema = schema;\n          this._writeSchema(schema);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"write\",\n    value: function write(payload) {\n      var schema = null;\n      if (!this._sink) {\n        throw new Error(\"RecordBatchWriter is closed\");\n      } else if (payload === null || payload === undefined) {\n        return this.finish() && undefined;\n      } else if (payload instanceof Table && !(schema = payload.schema)) {\n        return this.finish() && undefined;\n      } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n        return this.finish() && undefined;\n      }\n      if (schema && !schema.compareTo(this._schema)) {\n        if (this._started && this._autoDestroy) {\n          return this.close();\n        }\n        this.reset(this._sink, schema);\n      }\n      if (payload instanceof RecordBatch) {\n        if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n          this._writeRecordBatch(payload);\n        }\n      } else if (payload instanceof Table) {\n        this.writeAll(payload.chunks);\n      } else if (isIterable(payload)) {\n        this.writeAll(payload);\n      }\n    }\n  }, {\n    key: \"_writeMessage\",\n    value: function _writeMessage(message) {\n      var alignment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n      var a = alignment - 1;\n      var buffer = Message.encode(message);\n      var flatbufferSize = buffer.byteLength;\n      var prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n      var alignedSize = flatbufferSize + prefixSize + a & ~a;\n      var nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n      if (message.headerType === MessageHeader.RecordBatch) {\n        this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n      } else if (message.headerType === MessageHeader.DictionaryBatch) {\n        this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n      }\n      // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n      if (!this._writeLegacyIpcFormat) {\n        this._write(Int32Array.of(-1));\n      }\n      // Write the flatbuffer size prefix including padding\n      this._write(Int32Array.of(alignedSize - prefixSize));\n      // Write the flatbuffer\n      if (flatbufferSize > 0) {\n        this._write(buffer);\n      }\n      // Write any padding\n      return this._writePadding(nPaddingBytes);\n    }\n  }, {\n    key: \"_write\",\n    value: function _write(chunk) {\n      if (this._started) {\n        var buffer = toUint8Array(chunk);\n        if (buffer && buffer.byteLength > 0) {\n          this._sink.write(buffer);\n          this._position += buffer.byteLength;\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"_writeSchema\",\n    value: function _writeSchema(schema) {\n      return this._writeMessage(Message.from(schema));\n    }\n    // @ts-ignore\n  }, {\n    key: \"_writeFooter\",\n    value: function _writeFooter(schema) {\n      // eos bytes\n      return this._writeLegacyIpcFormat ? this._write(Int32Array.of(0)) : this._write(Int32Array.of(-1, 0));\n    }\n  }, {\n    key: \"_writeMagic\",\n    value: function _writeMagic() {\n      return this._write(MAGIC);\n    }\n  }, {\n    key: \"_writePadding\",\n    value: function _writePadding(nBytes) {\n      return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n  }, {\n    key: \"_writeRecordBatch\",\n    value: function _writeRecordBatch(batch) {\n      var _VectorAssembler$asse = VectorAssembler.assemble(batch),\n        byteLength = _VectorAssembler$asse.byteLength,\n        nodes = _VectorAssembler$asse.nodes,\n        bufferRegions = _VectorAssembler$asse.bufferRegions,\n        buffers = _VectorAssembler$asse.buffers;\n      var recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n      var message = Message.from(recordBatch, byteLength);\n      return this._writeDictionaries(batch)._writeMessage(message)._writeBodyBuffers(buffers);\n    }\n  }, {\n    key: \"_writeDictionaryBatch\",\n    value: function _writeDictionaryBatch(dictionary, id) {\n      var isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n      var _VectorAssembler$asse2 = VectorAssembler.assemble(dictionary),\n        byteLength = _VectorAssembler$asse2.byteLength,\n        nodes = _VectorAssembler$asse2.nodes,\n        bufferRegions = _VectorAssembler$asse2.bufferRegions,\n        buffers = _VectorAssembler$asse2.buffers;\n      var recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n      var dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n      var message = Message.from(dictionaryBatch, byteLength);\n      return this._writeMessage(message)._writeBodyBuffers(buffers);\n    }\n  }, {\n    key: \"_writeBodyBuffers\",\n    value: function _writeBodyBuffers(buffers) {\n      var buffer;\n      var size, padding;\n      for (var i = -1, n = buffers.length; ++i < n;) {\n        if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n          this._write(buffer);\n          if ((padding = (size + 7 & ~7) - size) > 0) {\n            this._writePadding(padding);\n          }\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"_writeDictionaries\",\n    value: function _writeDictionaries(batch) {\n      var _iterator2 = _createForOfIteratorHelper(batch.dictionaries),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n            id = _step2$value[0],\n            dictionary = _step2$value[1];\n          var offset = this._dictionaryDeltaOffsets.get(id) || 0;\n          if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n            var chunks = 'chunks' in dictionary ? dictionary.chunks : [dictionary];\n            var _iterator3 = _createForOfIteratorHelper(chunks),\n              _step3;\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var chunk = _step3.value;\n                this._writeDictionaryBatch(chunk, id, offset > 0);\n                offset += chunk.length;\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return this;\n    }\n  }], [{\n    key: \"throughNode\",\n    value: function throughNode(options) {\n      throw new Error(\"\\\"throughNode\\\" not available in this environment\");\n    }\n    /** @nocollapse */\n  }, {\n    key: \"throughDOM\",\n    value: function throughDOM(\n    // @ts-ignore\n    writableStrategy,\n    // @ts-ignore\n    readableStrategy) {\n      throw new Error(\"\\\"throughDOM\\\" not available in this environment\");\n    }\n  }]);\n  return RecordBatchWriter;\n}(ReadableInterop, Symbol.asyncIterator);\n/** @ignore */\nexport var RecordBatchStreamWriter = /*#__PURE__*/function (_RecordBatchWriter) {\n  _inherits(RecordBatchStreamWriter, _RecordBatchWriter);\n  var _super2 = _createSuper(RecordBatchStreamWriter);\n  function RecordBatchStreamWriter() {\n    _classCallCheck(this, RecordBatchStreamWriter);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(RecordBatchStreamWriter, null, [{\n    key: \"writeAll\",\n    value: /** @nocollapse */\n    function writeAll(input, options) {\n      var writer = new RecordBatchStreamWriter(options);\n      if (isPromise(input)) {\n        return input.then(function (x) {\n          return writer.writeAll(x);\n        });\n      } else if (isAsyncIterable(input)) {\n        return writeAllAsync(writer, input);\n      }\n      return _writeAll(writer, input);\n    }\n  }]);\n  return RecordBatchStreamWriter;\n}(RecordBatchWriter);\n/** @ignore */\nexport var RecordBatchFileWriter = /*#__PURE__*/function (_RecordBatchWriter2) {\n  _inherits(RecordBatchFileWriter, _RecordBatchWriter2);\n  var _super3 = _createSuper(RecordBatchFileWriter);\n  function RecordBatchFileWriter() {\n    var _this3;\n    _classCallCheck(this, RecordBatchFileWriter);\n    _this3 = _super3.call(this);\n    _this3._autoDestroy = true;\n    return _this3;\n  }\n  /** @nocollapse */\n  _createClass(RecordBatchFileWriter, [{\n    key: \"_writeSchema\",\n    value:\n    // @ts-ignore\n    function _writeSchema(schema) {\n      return this._writeMagic()._writePadding(2);\n    }\n  }, {\n    key: \"_writeFooter\",\n    value: function _writeFooter(schema) {\n      var buffer = Footer.encode(new Footer(schema, MetadataVersion.V4, this._recordBatchBlocks, this._dictionaryBlocks));\n      return _get(_getPrototypeOf(RecordBatchFileWriter.prototype), \"_writeFooter\", this).call(this, schema) // EOS bytes for sequential readers\n      ._write(buffer) // Write the flatbuffer\n      ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n      ._writeMagic(); // then the magic suffix\n    }\n  }], [{\n    key: \"writeAll\",\n    value: function writeAll(input) {\n      var writer = new RecordBatchFileWriter();\n      if (isPromise(input)) {\n        return input.then(function (x) {\n          return writer.writeAll(x);\n        });\n      } else if (isAsyncIterable(input)) {\n        return writeAllAsync(writer, input);\n      }\n      return _writeAll(writer, input);\n    }\n  }]);\n  return RecordBatchFileWriter;\n}(RecordBatchWriter);\n/** @ignore */\nexport var RecordBatchJSONWriter = /*#__PURE__*/function (_RecordBatchWriter3) {\n  _inherits(RecordBatchJSONWriter, _RecordBatchWriter3);\n  var _super4 = _createSuper(RecordBatchJSONWriter);\n  function RecordBatchJSONWriter() {\n    var _this4;\n    _classCallCheck(this, RecordBatchJSONWriter);\n    _this4 = _super4.call(this);\n    _this4._autoDestroy = true;\n    _this4._recordBatches = [];\n    _this4._dictionaries = [];\n    return _this4;\n  }\n  /** @nocollapse */\n  _createClass(RecordBatchJSONWriter, [{\n    key: \"_writeMessage\",\n    value: function _writeMessage() {\n      return this;\n    }\n    // @ts-ignore\n  }, {\n    key: \"_writeFooter\",\n    value: function _writeFooter(schema) {\n      return this;\n    }\n  }, {\n    key: \"_writeSchema\",\n    value: function _writeSchema(schema) {\n      return this._write(\"{\\n  \\\"schema\\\": \".concat(JSON.stringify({\n        fields: schema.fields.map(fieldToJSON)\n      }, null, 2)));\n    }\n  }, {\n    key: \"_writeDictionaries\",\n    value: function _writeDictionaries(batch) {\n      if (batch.dictionaries.size > 0) {\n        this._dictionaries.push(batch);\n      }\n      return this;\n    }\n  }, {\n    key: \"_writeDictionaryBatch\",\n    value: function _writeDictionaryBatch(dictionary, id) {\n      var isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n      this._write(this._dictionaryBlocks.length === 0 ? \"    \" : \",\\n    \");\n      this._write(\"\".concat(dictionaryBatchToJSON(dictionary, id, isDelta)));\n      this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n      return this;\n    }\n  }, {\n    key: \"_writeRecordBatch\",\n    value: function _writeRecordBatch(batch) {\n      this._writeDictionaries(batch);\n      this._recordBatches.push(batch);\n      return this;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._dictionaries.length > 0) {\n        this._write(\",\\n  \\\"dictionaries\\\": [\\n\");\n        var _iterator4 = _createForOfIteratorHelper(this._dictionaries),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var batch = _step4.value;\n            _get(_getPrototypeOf(RecordBatchJSONWriter.prototype), \"_writeDictionaries\", this).call(this, batch);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        this._write(\"\\n  ]\");\n      }\n      if (this._recordBatches.length > 0) {\n        for (var i = -1, n = this._recordBatches.length; ++i < n;) {\n          this._write(i === 0 ? \",\\n  \\\"batches\\\": [\\n    \" : \",\\n    \");\n          this._write(\"\".concat(recordBatchToJSON(this._recordBatches[i])));\n          this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n        }\n        this._write(\"\\n  ]\");\n      }\n      if (this._schema) {\n        this._write(\"\\n}\");\n      }\n      this._dictionaries = [];\n      this._recordBatches = [];\n      return _get(_getPrototypeOf(RecordBatchJSONWriter.prototype), \"close\", this).call(this);\n    }\n  }], [{\n    key: \"writeAll\",\n    value: function writeAll(input) {\n      return new RecordBatchJSONWriter().writeAll(input);\n    }\n  }]);\n  return RecordBatchJSONWriter;\n}(RecordBatchWriter);\n/** @ignore */\nfunction _writeAll(writer, input) {\n  var chunks = input;\n  if (input instanceof Table) {\n    chunks = input.chunks;\n    writer.reset(undefined, input.schema);\n  }\n  var _iterator5 = _createForOfIteratorHelper(chunks),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var batch = _step5.value;\n      writer.write(batch);\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return writer.finish();\n}\n/** @ignore */\nfunction writeAllAsync(_x, _x2) {\n  return _writeAllAsync.apply(this, arguments);\n}\n/** @ignore */\nfunction _writeAllAsync() {\n  _writeAllAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(writer, batches) {\n    var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, batch;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context.prev = 2;\n          _iterator = _asyncIterator(batches);\n        case 4:\n          _context.next = 6;\n          return _iterator.next();\n        case 6:\n          if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n            _context.next = 12;\n            break;\n          }\n          batch = _step.value;\n          writer.write(batch);\n        case 9:\n          _iteratorAbruptCompletion = false;\n          _context.next = 4;\n          break;\n        case 12:\n          _context.next = 18;\n          break;\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](2);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n        case 18:\n          _context.prev = 18;\n          _context.prev = 19;\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context.next = 23;\n            break;\n          }\n          _context.next = 23;\n          return _iterator.return();\n        case 23:\n          _context.prev = 23;\n          if (!_didIteratorError) {\n            _context.next = 26;\n            break;\n          }\n          throw _iteratorError;\n        case 26:\n          return _context.finish(23);\n        case 27:\n          return _context.finish(18);\n        case 28:\n          return _context.abrupt(\"return\", writer.finish());\n        case 29:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[2, 14, 18, 28], [19,, 23, 27]]);\n  }));\n  return _writeAllAsync.apply(this, arguments);\n}\nfunction fieldToJSON(_ref) {\n  var name = _ref.name,\n    type = _ref.type,\n    nullable = _ref.nullable;\n  var assembler = new JSONTypeAssembler();\n  return {\n    'name': name,\n    'nullable': nullable,\n    'type': assembler.visit(type),\n    'children': (type.children || []).map(fieldToJSON),\n    'dictionary': !DataType.isDictionary(type) ? undefined : {\n      'id': type.id,\n      'isOrdered': type.isOrdered,\n      'indexType': assembler.visit(type.indices)\n    }\n  };\n}\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary, id) {\n  var isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var field = new Field(\"\".concat(id), dictionary.type, dictionary.nullCount > 0);\n  var columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n  return JSON.stringify({\n    'id': id,\n    'isDelta': isDelta,\n    'data': {\n      'count': dictionary.length,\n      'columns': columns\n    }\n  }, null, 2);\n}\n/** @ignore */\nfunction recordBatchToJSON(records) {\n  return JSON.stringify({\n    'count': records.length,\n    'columns': JSONVectorAssembler.assemble(records)\n  }, null, 2);\n}","map":{"version":3,"sources":["ipc/writer.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\n\nexport interface RecordBatchStreamWriterOptions {\n    /**\n     *\n     */\n    autoDestroy?: boolean;\n    /**\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\n     * length instead of 8.\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\n     */\n    writeLegacyIpcFormat?: boolean;\n}\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: RecordBatchStreamWriterOptions) {\n        super();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    protected _writeLegacyIpcFormat: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\n                for (const chunk of chunks) {\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\n                    offset += chunk.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: RecordBatchStreamWriterOptions) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n"]},"metadata":{},"sourceType":"module"}