{"ast":null,"code":"import _slicedToArray from \"/Users/michalmizera/Repos/StreamlitMiami/lib/streamlit_lightweight_charts/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from '../vector/chunked';\nvar isArray = Array.isArray;\n/** @ignore */\nexport var selectArgs = function selectArgs(Ctor, vals) {\n  return _selectArgs(Ctor, vals, [], 0);\n};\n/** @ignore */\nexport var selectColumnArgs = function selectColumnArgs(args) {\n  var _selectFieldArgs2 = _selectFieldArgs(args, [[], []]),\n    _selectFieldArgs3 = _slicedToArray(_selectFieldArgs2, 2),\n    fields = _selectFieldArgs3[0],\n    values = _selectFieldArgs3[1];\n  return values.map(function (x, i) {\n    return x instanceof Column ? Column.new(x.field.clone(fields[i]), x) : x instanceof Vector ? Column.new(fields[i], x) : Column.new(fields[i], []);\n  });\n};\n/** @ignore */\nexport var selectFieldArgs = function selectFieldArgs(args) {\n  return _selectFieldArgs(args, [[], []]);\n};\n/** @ignore */\nexport var selectChunkArgs = function selectChunkArgs(Ctor, vals) {\n  return _selectChunkArgs(Ctor, vals, [], 0);\n};\n/** @ignore */\nexport var selectVectorChildrenArgs = function selectVectorChildrenArgs(Ctor, vals) {\n  return _selectVectorChildrenArgs(Ctor, vals, [], 0);\n};\n/** @ignore */\nexport var selectColumnChildrenArgs = function selectColumnChildrenArgs(Ctor, vals) {\n  return _selectColumnChildrenArgs(Ctor, vals, [], 0);\n};\n/** @ignore */\nfunction _selectArgs(Ctor, vals, res, idx) {\n  var value,\n    j = idx;\n  var i = -1,\n    n = vals.length;\n  while (++i < n) {\n    if (isArray(value = vals[i])) {\n      j = _selectArgs(Ctor, value, res, j).length;\n    } else if (value instanceof Ctor) {\n      res[j++] = value;\n    }\n  }\n  return res;\n}\n/** @ignore */\nfunction _selectChunkArgs(Ctor, vals, res, idx) {\n  var value,\n    j = idx;\n  var i = -1,\n    n = vals.length;\n  while (++i < n) {\n    if (isArray(value = vals[i])) {\n      j = _selectChunkArgs(Ctor, value, res, j).length;\n    } else if (value instanceof Chunked) {\n      j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\n    } else if (value instanceof Ctor) {\n      res[j++] = value;\n    }\n  }\n  return res;\n}\n/** @ignore */\nfunction _selectVectorChildrenArgs(Ctor, vals, res, idx) {\n  var value,\n    j = idx;\n  var i = -1,\n    n = vals.length;\n  while (++i < n) {\n    if (isArray(value = vals[i])) {\n      j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\n    } else if (value instanceof Ctor) {\n      j = _selectArgs(Vector, value.schema.fields.map(function (_, i) {\n        return value.getChildAt(i);\n      }), res, j).length;\n    } else if (value instanceof Vector) {\n      res[j++] = value;\n    }\n  }\n  return res;\n}\n/** @ignore */\nfunction _selectColumnChildrenArgs(Ctor, vals, res, idx) {\n  var value,\n    j = idx;\n  var i = -1,\n    n = vals.length;\n  while (++i < n) {\n    if (isArray(value = vals[i])) {\n      j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\n    } else if (value instanceof Ctor) {\n      j = _selectArgs(Column, value.schema.fields.map(function (f, i) {\n        return Column.new(f, value.getChildAt(i));\n      }), res, j).length;\n    } else if (value instanceof Column) {\n      res[j++] = value;\n    }\n  }\n  return res;\n}\n/** @ignore */\nvar toKeysAndValues = function toKeysAndValues(xs, _ref, i) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    k = _ref2[0],\n    v = _ref2[1];\n  return xs[0][i] = k, xs[1][i] = v, xs;\n};\n/** @ignore */\nfunction _selectFieldArgs(vals, ret) {\n  var keys, n;\n  switch (n = vals.length) {\n    case 0:\n      return ret;\n    case 1:\n      keys = ret[0];\n      if (!vals[0]) {\n        return ret;\n      }\n      if (isArray(vals[0])) {\n        return _selectFieldArgs(vals[0], ret);\n      }\n      if (!(vals[0] instanceof Data || vals[0] instanceof Vector || vals[0] instanceof DataType)) {\n        var _Object$entries$reduc = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\n        var _Object$entries$reduc2 = _slicedToArray(_Object$entries$reduc, 2);\n        keys = _Object$entries$reduc2[0];\n        vals = _Object$entries$reduc2[1];\n      }\n      break;\n    default:\n      !isArray(keys = vals[n - 1]) ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = []) : vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1);\n  }\n  var fieldIndex = -1;\n  var valueIndex = -1;\n  var idx = -1,\n    len = vals.length;\n  var field;\n  var val;\n  var _ret = _slicedToArray(ret, 2),\n    fields = _ret[0],\n    values = _ret[1];\n  while (++idx < len) {\n    val = vals[idx];\n    if (val instanceof Column && (values[++valueIndex] = val)) {\n      fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);\n    } else {\n      var _keys = keys;\n      var _keys$idx = _keys[idx];\n      field = _keys$idx === void 0 ? idx : _keys$idx;\n      if (val instanceof DataType && (values[++valueIndex] = val)) {\n        fields[++fieldIndex] = Field.new(field, val, true);\n      } else if (val && val.type && (values[++valueIndex] = val)) {\n        val instanceof Data && (values[valueIndex] = val = Vector.new(val));\n        fields[++fieldIndex] = Field.new(field, val.type, true);\n      }\n    }\n  }\n  return ret;\n}","map":{"version":3,"sources":["util/args.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from '../vector/chunked';\n\ntype RecordBatchCtor = typeof import('../recordbatch').RecordBatch;\n\nconst isArray = Array.isArray;\n\n/** @ignore */\nexport const selectArgs = <T>(Ctor: any, vals: any[]) => _selectArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnArgs = <T extends { [key: string]: DataType }>(args: any[]) => {\n    const [fields, values] = _selectFieldArgs<T>(args, [[], []]);\n    return values.map((x, i) =>\n        x instanceof Column ? Column.new(x.field.clone(fields[i]), x) :\n        x instanceof Vector ? Column.new(fields[i], x) as Column<T[keyof T]> :\n                              Column.new(fields[i], [] as Vector<T[keyof T]>[]));\n};\n\n/** @ignore */\nexport const selectFieldArgs = <T extends { [key: string]: DataType }>(args: any[]) => _selectFieldArgs<T>(args, [[], []]);\n/** @ignore */\nexport const selectChunkArgs = <T>(Ctor: any, vals: any[]) => _selectChunkArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectVectorChildrenArgs = <T extends Vector>(Ctor: RecordBatchCtor, vals: any[]) => _selectVectorChildrenArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnChildrenArgs = <T extends Column>(Ctor: RecordBatchCtor, vals: any[]) => _selectColumnChildrenArgs(Ctor, vals, [], 0) as T[];\n\n/** @ignore */\nfunction _selectArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectChunkArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectChunkArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Chunked) {\n            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectVectorChildrenArgs<T extends Vector>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Vector, value.schema.fields.map((_, i) => value.getChildAt(i)!), res, j).length;\n        } else if (value instanceof Vector) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectColumnChildrenArgs<T extends Column>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Column, value.schema.fields.map((f, i) => Column.new(f, value.getChildAt(i)!)), res, j).length;\n        } else if (value instanceof Column) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nconst toKeysAndValues = (xs: [any[], any[]], [k, v]: [any, any], i: number) => (xs[0][i] = k, xs[1][i] = v, xs);\n\n/** @ignore */\nfunction _selectFieldArgs<T extends { [key: string]: DataType }>(vals: any[], ret: [Field<T[keyof T]>[], Vector<T[keyof T]>[]]): [Field<T[keyof T]>[], (T[keyof T] | Vector<T[keyof T]>)[]] {\n    let keys: any[], n: number;\n    switch (n = vals.length) {\n        case 0: return ret;\n        case 1:\n            keys = ret[0];\n            if (!(vals[0])) { return ret; }\n            if (isArray(vals[0])) { return _selectFieldArgs(vals[0], ret); }\n            if (!(vals[0] instanceof Data || vals[0] instanceof Vector || vals[0] instanceof DataType)) {\n                [keys, vals] = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\n            }\n            break;\n        default:\n            !isArray(keys = vals[n - 1])\n                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])\n                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));\n    }\n\n    let fieldIndex = -1;\n    let valueIndex = -1;\n    let idx = -1, len = vals.length;\n    let field: number | string | Field<T[keyof T]>;\n    let val: Vector<T[keyof T]> | Data<T[keyof T]>;\n    let [fields, values] = ret as [Field<T[keyof T]>[], any[]];\n\n    while (++idx < len) {\n        val = vals[idx];\n        if (val instanceof Column && (values[++valueIndex] = val)) {\n            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);\n        } else {\n            ({ [idx]: field = idx } = keys);\n            if (val instanceof DataType && (values[++valueIndex] = val)) {\n                fields[++fieldIndex] = Field.new(field, val as DataType, true) as Field<T[keyof T]>;\n            } else if (val && val.type && (values[++valueIndex] = val)) {\n                val instanceof Data && (values[valueIndex] = val = Vector.new(val) as Vector);\n                fields[++fieldIndex] = Field.new(field, val.type, true) as Field<T[keyof T]>;\n            }\n        }\n    }\n    return ret;\n}\n"]},"metadata":{},"sourceType":"module"}