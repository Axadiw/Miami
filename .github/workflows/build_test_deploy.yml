name: Build
on:
  push:
    branches: [ master ]
    tags:
      - '*'
jobs:
  backend_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: cache poetry install
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-1.7.1
      - uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: cache deps
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}
      - run: poetry install --no-interaction --no-root
        if: steps.cache-deps.outputs.cache-hit != 'true'
      - run: poetry install --no-interaction
      - run: cp shared/consts_tpl.py shared/consts_secrets.py
      - run: poetry run python -m pytest

  frontend_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v3
      - run: npm install
      - run: npm test

  api_build_and_publish:
    if: github.event_name == 'push' && contains(github.event.ref, '/tags/')
    defaults:
      run:
        working-directory: ./backend
    runs-on: buildjet-2vcpu-ubuntu-2204-arm
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build the Docker image (tag version)
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile_api
          platforms: linux/aarch64
          build-args: |
            VERSION=${{ github.ref_name }}
          push: true
          tags: ghcr.io/axadiw/miami-api:${{  github.ref_name }}

  data_harvester_build_and_publish:
    if: github.event_name == 'push' && contains(github.event.ref, '/tags/')
    defaults:
      run:
        working-directory: ./backend
    runs-on: buildjet-2vcpu-ubuntu-2204-arm
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build the Docker image (tag version)
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile_data_harvester
          platforms: linux/aarch64
          build-args: |
            VERSION=${{ github.ref_name }}
          push: true
          tags: ghcr.io/axadiw/miami-data-harvester:${{  github.ref_name }}

  frontend_build_and_publish:
    if: github.event_name == 'push' && contains(github.event.ref, '/tags/')
    defaults:
      run:
        working-directory: ./frontend
    runs-on: buildjet-8vcpu-ubuntu-2204-arm
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build the Docker image (tag version)
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          platforms: linux/aarch64
          push: true
          tags: ghcr.io/axadiw/miami-frontend:${{  github.ref_name }}

  deploy:
    defaults:
      run:
        working-directory: ./frontend
    runs-on: ubuntu-latest
    needs: [ backend_test, frontend_test, frontend_build_and_publish, api_build_and_publish, data_harvester_build_and_publish ]
    steps:
      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create env file
        uses: "finnp/create-file-action@master"
        env:
          FILE_NAME: "/miami_env"
          FILE_DATA: "MIAMI_VERSION="${{ github.ref_name }}
      - name: Deploy to remote server
        uses: kitconcept/docker-stack-deploy@v1.2.0
        with:
          registry: "ghcr.io"
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
          remote_host: ${{ secrets.REMOTE_HOST }}
          remote_user: ${{ secrets.REMOTE_USERNAME }}
          remote_private_key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          stack_file: "docker-compose-prod.yml"
          stack_name: ${{ secrets.REMOTE_STACK_NAME }}
          env_file: /miami_env
      - name: pushover-actions
        uses: umahmood/pushover-actions@main
        env:
          PUSHOVER_TOKEN: ${{ secrets.PUSHOVER_TOKEN }}
          PUSHOVER_USER: ${{ secrets.PUSHOVER_USER }}
        with:
          status: ${{ job.status }}
          title: 'Miami Deployment'
          message: 'Deploy ${{  github.ref_name }} successful'